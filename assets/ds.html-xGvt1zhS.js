import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,a as t,o as l}from"./app-BvEWR9Cw.js";const n={};function e(h,i){return l(),a("div",null,i[0]||(i[0]=[t(`<p>Python 提供了一些基本的数据结构：</p><ul><li>字符串</li><li>列表</li><li>元组</li><li>字典</li><li>集合</li></ul><p>他们都是可迭代的类型，迭代是一种数学概念，指的是重复反馈过程的活动，对于计算机程序来讲，就是执行重复的循环，而 for 循环需要一个迭代类型的数据才能够进行循环操作，同时迭代又可分为有序和无序</p><p>有序的序列指的是字符串，列表，元组，指它们的成员都是有序排列，并且可以通过下标偏移量访问它们的每一个成员，无序的序列指的是字典、集合，它们的成员排列是无序的，不能通过下标访问成员</p><div class="hint-container tip"><p class="hint-container-title">下标</p><p>下标也叫索引，可以通过<code>[索引值]</code>操作符访问序列中的每一个或多个成员，下标都是从 0 开始从左到右递增，但 Python 也提供了反向索引，从 -1 开始从右到左递减</p></div><h2 id="字符串" tabindex="-1"><a class="header-anchor" href="#字符串"><span>字符串</span></a></h2><p>字符串是一堆字符组成的序列，通过单引号或双引号定义，字符串属于<strong>不可变序列类型</strong></p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">foo </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;hello&#39;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">bar </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;helloworld&quot;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">foo[</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">4</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># o</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="字符串常用方法" tabindex="-1"><a class="header-anchor" href="#字符串常用方法"><span>字符串常用方法</span></a></h3><ul><li>判断类</li></ul><ol><li>string.isspace()：只有空格则返回 True</li><li>string.isalnum()：至少有一个字符，并且所有的字符都是字母或数字则返回 True</li><li>string.isalpha()：至少有一个字符，并且所有的字符都是字母则返回 True</li><li>string.isdecimal()：只包含数字则返回 True，全角数字，不能判断小数</li><li>string.isdigit()：只包含数字则返回 True，全角数字，Unicode，转义数字，不能判断小数</li><li>string.isnumeric()：只包含数字则返回 True，全角数字，中文数字，不能判断 1</li><li>string.istitle()：如果 String 是标题化（每个单词的首字母大写）则返回 True</li><li>string.islower()：所有的字符都是小写则返回 True</li><li>string.isupper()：素有的字符都是大写则返回 True</li></ol><ul><li>查找和替换类</li></ul><ol><li>string.count(c)：返回子串在字符串中出现的次数</li><li>string.startswith(str)：检查字符串是否以 str 开头，是就返回 True</li><li>string.endswith(str)：检查字符串是否以 str 结尾，是就返回 True</li><li>string.find()：查找字符串出现的索引位置，不存在则返回 -1</li><li>string.rfind()：查找反向索引，不存在则报错</li><li>string.index()：查找字符串出现的索引位置，不存在则报错</li><li>string.rindex()：查找反向索引，不存在则报错</li><li>string.replace(old_str, new_str)：替换指定字符串，返回新的字符串</li></ol><ul><li>大小写转换</li></ul><ol><li>string.capitalize()：将字符串第一个字符转为大写</li><li>string.title()：将字符串中的每一个单词首字母转为大写</li><li>string.lower()：所有的字符转换位小写</li><li>string.upper()：所有的字符转换为大写</li><li>string.swapcase()：反转所有的字符大小写</li></ol><ul><li>文本对齐</li></ul><ol><li>string.ljust(width)：返回左对齐的字符串，并用空白字符填充长度至 width 的新字符串</li><li>string.rjust(width)：返回右对齐的字符串，并用空白字符填充长度至 width 的新字符串</li><li>string.center(width)：返回居中对齐的字符串，并用空白字符填充长度至 width 的新字符串</li></ol><ul><li>去除空白字符</li></ul><ol><li>string.lstrip()：去除左边开始的空白字符</li><li>string.rstrip()：去除右边开始的空白字符</li><li>string.strip()：去除左右两边空白字符</li></ol><ul><li>拆分和连接</li></ul><ol><li>string.partition(str)：</li><li>string.rpartition(str)：</li><li>string.split(str)：将一个字符串拆分成一个列表返回</li><li>string.splitlines(str)：</li><li>str.join(seq)：将字符串作为分隔符，拼接可迭代类型并返回新字符串</li></ol><h3 id="字符串的转义" tabindex="-1"><a class="header-anchor" href="#字符串的转义"><span>字符串的转义</span></a></h3><p>Python 会将字符串中的<code>\\</code>看做成转义符号，用来表示一些不能够显示的特殊符号，比如将<code>\\n</code>看作成一个换行</p><h2 id="列表" tabindex="-1"><a class="header-anchor" href="#列表"><span>列表</span></a></h2><p>列表（List）是 Python 中使用最频繁的数据类型，在其他语言中叫做<strong>数组</strong>，列表属于可变序列类型，可以通过赋值运算符修改成员，列表专门用于存储一串数据，用<code>[]</code>来定义，数据之间用<code>,</code>分隔，可以存放不同类型数据</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">name_list </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;zs&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">23</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;男&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">name_list[</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 23</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="列表常用方法" tabindex="-1"><a class="header-anchor" href="#列表常用方法"><span>列表常用方法</span></a></h3><ul><li>list.index(value)：获取元素在列表中的索引，如果有则返回索引值，没有则报错</li><li>list.append(value)：追加一个元素到列表末尾</li><li>list.insert(index, value)：指定位置添加一个元素</li><li>list.extend(iterable)：该方法接收一个迭代器类型，会将该迭代器中的元素添加到列表</li><li>list.remove(value)：移除第一次出现的指定值</li><li>list.pop()：默认移除列表中最后一个元素，并返回该元素，也可以指定索引，移除并返回该元素</li><li>list.clear()：移除所有的元素</li><li>list.sort(&lt;reverse=True&gt;)：对列表中的元素进行升序/降序排序</li><li>list.reverse()：反转列表中所有的元素</li><li>list.count(value)：返回列表中元素出现的次数</li><li>del list[index]：通过<code>del</code>关键字移除指定元素</li></ul><h2 id="元组" tabindex="-1"><a class="header-anchor" href="#元组"><span>元组</span></a></h2><p>元组（Tuple）和列表类似，属于不可变序列类型，不能通过赋值运算符来修改成员，通过<code>()</code>来定义，元组只包含一个元素时，需要在元素后面添加一个逗号</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">id</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">101</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">102</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">id</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 101</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="元组常用方法" tabindex="-1"><a class="header-anchor" href="#元组常用方法"><span>元组常用方法</span></a></h3><ul><li>tuple.count(value)：返回一个数据在元组中出现的次数</li><li>tuple.index(value)：返回元素在元素中的索引</li></ul><h2 id="字典" tabindex="-1"><a class="header-anchor" href="#字典"><span>字典</span></a></h2><p>字典（dictionary）是除列表之外最灵活的数据类型，字典也可以存储多个数据，只不过是以键值对形式来存储数据的，通过<code>{}</code>定义，且键值对必须用<code>:</code>分割，键必须是不可变类型。字典属于无序类型，通过键来访问成员</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">foo </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  &quot;name&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;foo&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  &quot;age&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">21</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">foo[</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;name&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]  </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 取出键对应的值，如果指定键不存在则报错</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">提示</p><p>字典是一种无序的数据集合，用 print 函数打印字典时并不会按照定义的顺序一样输出</p></div><h3 id="字典常用方法" tabindex="-1"><a class="header-anchor" href="#字典常用方法"><span>字典常用方法</span></a></h3><ol><li>dic.get(key, 默认值)：返回 key 对应的值，不存在就返回默认值</li><li>dic.pop(key)：移除指定键的值</li><li>dic.update(temp_dict)：合并字典，如果有相同的键值对，会被覆盖掉</li><li>dic.clear()：清空字典</li></ol><h2 id="集合" tabindex="-1"><a class="header-anchor" href="#集合"><span>集合</span></a></h2><p>Python 的集合，和数学中的集合一样，用于保存不重复的元素，每一个元素都是唯一的，Python 将每个集合元素放入<code>{}</code>中，元素通过<code>,</code>分隔，集合只能存储不可变类型，否则会抛出 TypeError</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">3</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">4</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>即使在集合中存储了相同的元素，但是集合只会保留一份</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;&gt;&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">3</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">4</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">3</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">4</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container caution"><p class="hint-container-title">警告</p><p>使用<code>{}</code>创建集合时，如果只有一个元素，必须在元素后面加上<code>,</code></p></div><p>除了使用<code>{}</code>创建集合以外，还可以通过 Python 提供的内置函数 set 来创建，set 函数会将可迭代对象转换成集合，比如：</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;&gt;&gt;</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> set</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;hello&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;h&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;e&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;l&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;l&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;o&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>由于集合是无序的，无法通过下标访问，只能被当作迭代对象遍历</p><h3 id="set-集合操作" tabindex="-1"><a class="header-anchor" href="#set-集合操作"><span>set 集合操作</span></a></h3><p>set 集合可以通过 add 方法实现增加元素，但是必须是不可变类型</p><p>同样的，也提供了 remove 方法删除元素，如果不存在则会抛出 KeyError 错误，如果不想抛出错误，也可以使用 discard 方法，使用效果和 remove 一样</p><h3 id="集合的运算" tabindex="-1"><a class="header-anchor" href="#集合的运算"><span>集合的运算</span></a></h3><p>集合最常用的操作就是做一些数学上的交集，并集，差集以及对称差集运算</p><table><thead><tr><th>操作</th><th>运算符</th><th>含义</th></tr></thead><tbody><tr><td>交集</td><td>&amp;</td><td>取公共元素</td></tr><tr><td>并集</td><td>|</td><td>取所有元素</td></tr><tr><td>差集</td><td>-</td><td>取一个集合中另一个集合没有的元素</td></tr><tr><td>对称差集</td><td>^</td><td>取两个集合中不属于两个集合的交集的元素</td></tr></tbody></table><h2 id="可变和不可变类型" tabindex="-1"><a class="header-anchor" href="#可变和不可变类型"><span>可变和不可变类型</span></a></h2><p>Python 中一切皆对象，可变指的是对象的内容可变，而不可变是指对象的内容不可变，比如字符串的内容不可变，列表的内容可变，元组的内容不可变</p><h2 id="切片操作" tabindex="-1"><a class="header-anchor" href="#切片操作"><span>切片操作</span></a></h2><p>切片是 Python 提供的一种高级语法，用来取出有序序列类型的指定数据，比如：字符串、列表、元组，切片通过索引来指定范围，从一个大的序列类型切出小的序列类型数据</p><p>slice[开始索引:结束索引:步长]</p><p>步长用于指定隔几个索引取一次数据，可以省略不写，默认为 1，当步长为正时，从左至右切片，为负时，从右至左切片</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">str</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;0123456789&quot;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">str[</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">6</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 2345</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">str[</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:] </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 23456789</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">str[:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">4</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 0123</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">str[:] </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 0123456789</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">str[::</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 02468</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">str[</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">::</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 13579</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">str[::</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 9876543210</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">str[</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">6</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 98765</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,61)]))}const r=s(n,[["render",e]]),d=JSON.parse(`{"path":"/python/ds.html","title":"数据结构","lang":"zh-CN","frontmatter":{"title":"数据结构","category":"编程语言","tag":["Python"],"article":false,"description":"Python 提供了一些基本的数据结构： 字符串 列表 元组 字典 集合 他们都是可迭代的类型，迭代是一种数学概念，指的是重复反馈过程的活动，对于计算机程序来讲，就是执行重复的循环，而 for 循环需要一个迭代类型的数据才能够进行循环操作，同时迭代又可分为有序和无序 有序的序列指的是字符串，列表，元组，指它们的成员都是有序排列，并且可以通过下标偏移量访...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"WebPage\\",\\"name\\":\\"数据结构\\",\\"description\\":\\"Python 提供了一些基本的数据结构： 字符串 列表 元组 字典 集合 他们都是可迭代的类型，迭代是一种数学概念，指的是重复反馈过程的活动，对于计算机程序来讲，就是执行重复的循环，而 for 循环需要一个迭代类型的数据才能够进行循环操作，同时迭代又可分为有序和无序 有序的序列指的是字符串，列表，元组，指它们的成员都是有序排列，并且可以通过下标偏移量访...\\"}"],["meta",{"property":"og:url","content":"https://jinqiu.wang/python/ds.html"}],["meta",{"property":"og:site_name","content":"JQiue's notes"}],["meta",{"property":"og:title","content":"数据结构"}],["meta",{"property":"og:description","content":"Python 提供了一些基本的数据结构： 字符串 列表 元组 字典 集合 他们都是可迭代的类型，迭代是一种数学概念，指的是重复反馈过程的活动，对于计算机程序来讲，就是执行重复的循环，而 for 循环需要一个迭代类型的数据才能够进行循环操作，同时迭代又可分为有序和无序 有序的序列指的是字符串，列表，元组，指它们的成员都是有序排列，并且可以通过下标偏移量访..."}],["meta",{"property":"og:type","content":"website"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-06-19T06:51:15.000Z"}],["meta",{"property":"article:tag","content":"Python"}],["meta",{"property":"article:modified_time","content":"2025-06-19T06:51:15.000Z"}]]},"git":{"createdTime":1750315875000,"updatedTime":1750315875000,"contributors":[{"name":"JQiue","username":"JQiue","email":"861947542@qq.com","commits":1,"url":"https://github.com/JQiue"}]},"readingTime":{"minutes":7.35,"words":2206},"filePathRelative":"python/ds.md","excerpt":"<p>Python 提供了一些基本的数据结构：</p>\\n<ul>\\n<li>字符串</li>\\n<li>列表</li>\\n<li>元组</li>\\n<li>字典</li>\\n<li>集合</li>\\n</ul>\\n<p>他们都是可迭代的类型，迭代是一种数学概念，指的是重复反馈过程的活动，对于计算机程序来讲，就是执行重复的循环，而 for 循环需要一个迭代类型的数据才能够进行循环操作，同时迭代又可分为有序和无序</p>\\n<p>有序的序列指的是字符串，列表，元组，指它们的成员都是有序排列，并且可以通过下标偏移量访问它们的每一个成员，无序的序列指的是字典、集合，它们的成员排列是无序的，不能通过下标访问成员</p>","autoDesc":true}`);export{r as comp,d as data};
