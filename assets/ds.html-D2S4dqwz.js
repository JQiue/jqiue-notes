import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as l,a as e,f as s,b as a,o as t}from"./app-BvEWR9Cw.js";const h={};function d(r,i){return t(),l("div",null,[i[0]||(i[0]=e(`<h2 id="数组" tabindex="-1"><a class="header-anchor" href="#数组"><span>数组</span></a></h2><p>数组是同一类型的集合，一旦创建大小就不可变</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">[] array </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#C18401;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">[</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">5</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">]</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>数组所有的元素初始化为默认值，整形都是<code>0</code>，浮点型是<code>0.0</code>，布尔型是<code>false</code></p><p>也可以在定义数组时指定初始化元素，这样就不必写出数组大小</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">[] array </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#C18401;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">[]{</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 3</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 4</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 5</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>还可以进一步简写成</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">[] array </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> {</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 3</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="字符串" tabindex="-1"><a class="header-anchor" href="#字符串"><span>字符串</span></a></h2><p>字符串本质上是 Unicode 字符序列，比如<code>&quot;Hello&quot;</code>是由五个字符组成。在标准类库中提供了一个预定义的类<code>String</code>，每一个通过<code>&quot;&quot;</code>括起来的字符串都是 String 类的一个实例</p><p>允许 + 号连接两个字符串，当一个字符串与一个非字符串的值进行拼接时将会被转换为字符串进行拼接</p><p>也可以修改字符串变量的引用，但字符串本身是不可修改的，应该提取需要的字符在拼接上替换的字符串来修改</p><p><code>equlas()</code>方法可以检测两个字符串是否相等，<code>equlasIgnoreCase()</code>方法是不区分大小写的</p><p>不应该使用<code>==</code>检测字符串是否相等，因为这个运算符只能比较两个字符串之间的引用是否相等</p><p>空串表示长度为<code>0</code>的字符串，通过字符串对象的<code>length()</code>方法返回</p><p>字符串变量也可以存放特殊值<code>null</code>，表示这个变量没有和任何对象进行关联</p><h3 id="stringbuilder-和-stringbuffer" tabindex="-1"><a class="header-anchor" href="#stringbuilder-和-stringbuffer"><span>StringBuilder 和 StringBuffer</span></a></h3><p>有时候需要由较短的字符串构建，比如来自按键或者文件中的单词，采用字符串连接的方式效率比较低，每次连接字符串都会构建一个新的字符串对象，即耗时，又浪费空间，而使用 StringBuilder 类就可以避免这个问题</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">StringBuilder</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> builder </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> StringBuilder</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">builder</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">append</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(str);</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">builder</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">append</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(ch);</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">builder</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">toSring</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过 StringBuilder 类构建一个空的字符串构造器，当需要添加内容时就调用<code>append()</code>方法，在需要构建字符串时就调用<code>toString()</code>方法</p><p>在 5.0 版本中引入了 StringBuilder 类，前身是 StringBuffer，它的效率有点低，但允许多线程的方式进行字符串的编辑，如果字符串都在单线程中编辑，则应该使用 StringBuilder 替代，他们的 API 都是相同的</p><ul><li>int length()</li><li>append(str)</li><li>insert(offset, str)</li><li>delete(offset, str)</li><li>toString()</li></ul><h3 id="string-api" tabindex="-1"><a class="header-anchor" href="#string-api"><span>String API</span></a></h3><ul><li>char charAt(int index)：返回指定位置的字符</li><li>int codePointAt(int index)：返回指定位置字符的 ASCII 码</li><li>boolean equals(Object obj)：比较字符串是否相等</li><li>boolean startsWith(String str)/endWith(String str)：以 suffix 开头或结尾，则返回 true</li><li>int indexOf(String str)：返回匹配到的第一个子串的开始位置，不存在则返回 -1</li><li>lastIndexOf(String str)：返回匹配到的最后一个子串的开始位置，不存在则返回 -1</li><li>int length()：返回字符串长度</li><li>String replace(String oldString, String newString)：替换原始字符串中的 oldString，并返回新的字符串</li><li>String substring(int beginIndex, int endIndex)：从指定位置开始截取字符串返回</li><li>String toLowerCase()：将大写字母改为小写并返回</li><li>String toUpperCase()：将小写字符改为大写并返回</li><li>String trim()：返回删除了头部和尾部空格的字符串</li><li>String String.join(CharSequence delimiter, elements)：通过分隔符连接数组或集合返回</li></ul><div class="hint-container tip"><p class="hint-container-title">提示</p><p>CharSequence 是一种接口类型，所有的字符串接口都属于这个接口</p></div><h2 id="集合" tabindex="-1"><a class="header-anchor" href="#集合"><span>集合</span></a></h2><p>集合只能存储引用数据类型，存储基本类型会自动装箱，集合长度可以随着元素的增长而增长，这是它和数组的区别</p><p>所有类型的集合继承<code>Collection</code>接口</p><h3 id="list" tabindex="-1"><a class="header-anchor" href="#list"><span>List</span></a></h3><p>List 是存储有序的，可以重复的元素，List 在 Collection 基础上的方法：</p><ul><li><code>void add(int index, E element)</code></li><li><code>E remove(int index)</code></li><li><code>E get(int index)</code></li><li><code>E set(int index, E element)</code></li></ul><h3 id="arraylist" tabindex="-1"><a class="header-anchor" href="#arraylist"><span>ArrayList</span></a></h3><p>ArrayList 是数组实现的，查询快，增删慢，具有以下自身方法：</p><ul><li><code>boolean add(E)</code> 一定是 true</li><li><code>clear()</code> 清空集合中的元素</li><li><code>contains()</code> 判断是否包含该元素</li><li><code>boolean isEmpty()</code> 判断是否为空，空则为 true</li><li><code>int size()</code> 返回元素个数</li><li><code>Object[] toArray()</code> 将集合转换成数组，打印时需要向下转型</li><li><code>addAll(collection c)</code>将整个集合当成一个对象添加到集合中</li><li><code>containsAll(collection c)</code>判断调用的集合是否包含传入的集合</li><li><code>removeAll(collection c)</code>删除两个集合中的交集，没有交集则返回 false</li><li><code>retainsAll(collection c)</code>获取集合中的交集，调用的集合改变则返回 true,否则返回 false，具体看调用集合的值调用完后是否和调用前一样</li></ul><h3 id="linkedlist" tabindex="-1"><a class="header-anchor" href="#linkedlist"><span>LinkedList</span></a></h3><p>LinkedList 可以被用作栈，队列，增删快，查询慢，：</p><ul><li><code>addFirst(E)</code> - 添加元素到头部</li><li><code>addLast(E)</code> - 添加元素到尾部</li><li><code>removeFirst()</code> - 移除头部元素并返回</li><li><code>removeLast()</code> - 移除尾部元素并返回</li></ul><h3 id="queue" tabindex="-1"><a class="header-anchor" href="#queue"><span>Queue</span></a></h3>`,38)),s(" todo "),i[1]||(i[1]=a("h3",{id:"map",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#map"},[a("span",null,"Map")])],-1)),s(" todo "),i[2]||(i[2]=e('<h3 id="set" tabindex="-1"><a class="header-anchor" href="#set"><span>Set</span></a></h3><p>Set 是存储无序的，不可以重复的元素，也有多种实现，都继承 Set 接口，本身有自己的的实现方法：</p><ul><li>boolean add(E e);</li><li>boolean addAll(Collection&lt;? extends E&gt; c);</li><li>boolean remove(Object o);</li><li>boolean removeAll(Collection&lt;?&gt; c);</li><li>void clear();</li><li>size()</li><li>boolean isEmpty();</li><li>boolean contains(Object o);</li><li>boolean containsAll(Collection&lt;?&gt; c);</li><li>boolean retainAll(Collection&lt;?&gt; c);</li><li>boolean equals(Object o);</li><li>int hashCode();</li></ul><p>HashSet 是用哈希表实现的，不能通过类似角标的方式获取元素</p><p>LinkedHashSet 是用链表实现的，是 Set 集合中唯一一个能够保证怎么存就怎么取出的集合</p><p>TreeSet 是用二叉树实现的，于 HashSet 不同的是，TreeSet 具有排序功能</p><h2 id="vector" tabindex="-1"><a class="header-anchor" href="#vector"><span>Vector</span></a></h2><p>Vector 是由数组实现的一个类似动态数组的功能</p>',8)),s(" todo "),i[3]||(i[3]=e(`<h2 id="迭代器" tabindex="-1"><a class="header-anchor" href="#迭代器"><span>迭代器</span></a></h2><p>可以用来迭代集合中的元素，集合需要调用返回迭代器对象的方法。每个集合内部存储结构是不同的，因此在每个集合中实现<code>hasNext()</code>和<code>Next()</code>方法是臃肿的，迭代器是将这样的方法向上抽取接口，然后在每个集合内部实现自己定义的迭代方式，就能规定所有的集合遵守实现<code>hasNext()</code>和<code>Next()</code>方法</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">HashSet</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> a </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> HashSet</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">iterator</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">while</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">hasNext</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">  a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">next</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3)),s(" todo ")])}const o=n(h,[["render",d]]),c=JSON.parse(`{"path":"/java/ds.html","title":"数据结构","lang":"zh-CN","frontmatter":{"title":"数据结构","category":"编程语言","tag":["Java"],"article":false,"order":2,"description":"数组 数组是同一类型的集合，一旦创建大小就不可变 数组所有的元素初始化为默认值，整形都是0，浮点型是0.0，布尔型是false 也可以在定义数组时指定初始化元素，这样就不必写出数组大小 还可以进一步简写成 字符串 字符串本质上是 Unicode 字符序列，比如\\"Hello\\"是由五个字符组成。在标准类库中提供了一个预定义的类String，每一个通过\\"\\"括...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"WebPage\\",\\"name\\":\\"数据结构\\",\\"description\\":\\"数组 数组是同一类型的集合，一旦创建大小就不可变 数组所有的元素初始化为默认值，整形都是0，浮点型是0.0，布尔型是false 也可以在定义数组时指定初始化元素，这样就不必写出数组大小 还可以进一步简写成 字符串 字符串本质上是 Unicode 字符序列，比如\\\\\\"Hello\\\\\\"是由五个字符组成。在标准类库中提供了一个预定义的类String，每一个通过\\\\\\"\\\\\\"括...\\"}"],["meta",{"property":"og:url","content":"https://jinqiu.wang/java/ds.html"}],["meta",{"property":"og:site_name","content":"JQiue's notes"}],["meta",{"property":"og:title","content":"数据结构"}],["meta",{"property":"og:description","content":"数组 数组是同一类型的集合，一旦创建大小就不可变 数组所有的元素初始化为默认值，整形都是0，浮点型是0.0，布尔型是false 也可以在定义数组时指定初始化元素，这样就不必写出数组大小 还可以进一步简写成 字符串 字符串本质上是 Unicode 字符序列，比如\\"Hello\\"是由五个字符组成。在标准类库中提供了一个预定义的类String，每一个通过\\"\\"括..."}],["meta",{"property":"og:type","content":"website"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-06-19T06:51:15.000Z"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:modified_time","content":"2025-06-19T06:51:15.000Z"}]]},"git":{"createdTime":1750315875000,"updatedTime":1750315875000,"contributors":[{"name":"JQiue","username":"JQiue","email":"861947542@qq.com","commits":1,"url":"https://github.com/JQiue"}]},"readingTime":{"minutes":5.15,"words":1546},"filePathRelative":"java/ds.md","excerpt":"<h2>数组</h2>\\n<p>数组是同一类型的集合，一旦创建大小就不可变</p>\\n<div class=\\"language-java line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"java\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#C18401;--shiki-dark:#C678DD\\">int</span><span style=\\"--shiki-light:#E45649;--shiki-dark:#E06C75\\">[] array </span><span style=\\"--shiki-light:#383A42;--shiki-dark:#56B6C2\\">=</span><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\"> new</span><span style=\\"--shiki-light:#C18401;--shiki-dark:#C678DD\\"> int</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#E06C75\\">[</span><span style=\\"--shiki-light:#986801;--shiki-dark:#D19A66\\">5</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#E06C75\\">]</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">;</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div></div></div>","autoDesc":true}`);export{o as comp,c as data};
