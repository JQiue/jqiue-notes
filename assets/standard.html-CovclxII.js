import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as t,a,o as n}from"./app-BvEWR9Cw.js";const e={};function h(l,i){return n(),t("div",null,i[0]||(i[0]=[a(`<p>这里是 Python 中提供的一些标准功能</p><h2 id="input" tabindex="-1"><a class="header-anchor" href="#input"><span>input</span></a></h2><p><code>input()</code>函数用来获取键盘输入数据，当运行到该函数时，会等待用户输入数据完毕才会执行其他的语句，同时也可提供字符串来作为输入的提示信息，该函数的返回值即用户输入的数据</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">input</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">input</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;请输入密码：&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container caution"><p class="hint-container-title">警告</p><p>input() 函数只能得到字符串</p></div><h2 id="print" tabindex="-1"><a class="header-anchor" href="#print"><span>print</span></a></h2><p><code>print()</code>函数向控制台输出数据</p><h3 id="输出函数的格式化" tabindex="-1"><a class="header-anchor" href="#输出函数的格式化"><span>输出函数的格式化</span></a></h3><p>有时候我们可能需要输出文字信息的同时，也将数据一起输出，这就需要<strong>格式化控制符</strong>，包含<code>%</code>的字符串，被称为格式化字符串，不同的类型要使用不同的格式化控制符</p><table><thead><tr><th>格式化字符</th><th>含义</th></tr></thead><tbody><tr><td>%s</td><td>字符串</td></tr><tr><td>%d</td><td>整型，%06d 表示输出的整数位数，不足则用 0 补充</td></tr><tr><td>%f</td><td>浮点型，%.2f 表示小数点只留两位</td></tr><tr><td>%%</td><td>输出%</td></tr></tbody></table><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">name </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;wjq&quot;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">age </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 22</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">height </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 17.3</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">print</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">%s</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> %</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> name)</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">print</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">%d</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> %</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> age)</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">print</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">%f</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> %</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> height)</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">print</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">%s%d%f</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> %</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (name, age, height)) </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 可以同时输出多个变量</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">提示</p><p>这里的(name, age, height)本质上是元组类型</p></div><h2 id="类型转换" tabindex="-1"><a class="header-anchor" href="#类型转换"><span>类型转换</span></a></h2><ol><li>int：转换为整型</li><li>float：转换为浮点型</li><li>str：转换为字符串类型</li><li>list：将元组转换为列表</li><li>turple：将列表转换为元组</li><li>dict：创建一个字典，可以将可迭代对象转换为字典</li><li>set：将一个序列转换为集合</li><li>eval：接受一个字符串表达式，并返回表达式的值</li></ol><h2 id="算术类" tabindex="-1"><a class="header-anchor" href="#算术类"><span>算术类</span></a></h2><ol><li>max：返回参数的最大值，可以是序列</li><li>min：返回参数的最小值，可以是序列</li><li>sum：对序列进行求和</li><li>divmod：返回一个包含商（整除）和余数的元组</li><li>pow：返回 x 的 y 次方</li></ol><h2 id="其他" tabindex="-1"><a class="header-anchor" href="#其他"><span>其他</span></a></h2><ol><li>sorted：对可迭代对象进行排序，并返回一个列表</li><li>id：返回对象的地址</li><li>range：生成一个整数列表</li><li>len：返回对象的长度</li></ol><h2 id="filter" tabindex="-1"><a class="header-anchor" href="#filter"><span>filter</span></a></h2><p>filter 用于过滤不符合条件的元素，并返回符合条件的元素组成的列表，filter 第一个参数为函数，第二个参数为迭代类型，每一个元素都会传入函数中进行判断，返回 True 或 False，将返回 True 的元素放入新列表中</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">f </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> filter</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">lambda</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic;"> x</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: x </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 10</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, [</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">6</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">5</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">23</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">43</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">15</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">])</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">print</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">([i </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">for</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> i </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">in</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> f]) </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># [23, 43, 15]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container warning"><p class="hint-container-title">注意</p><p>在 Python 2 中 filter 返回的是列表，而 Python 3 中返回的是 filter 类，可以被迭代</p></div><h2 id="文件操作" tabindex="-1"><a class="header-anchor" href="#文件操作"><span>文件操作</span></a></h2><p>Python 通过一些内置函数就可以进行一些系统文件的操作</p><table><thead><tr><th>模式</th><th>文件类型</th><th>操作方式</th><th>文件不存在时</th><th>是否覆盖写</th></tr></thead><tbody><tr><td>r</td><td>文本文件</td><td>只读</td><td>报错</td><td>-</td></tr><tr><td>r+</td><td>文本文件</td><td>可读可写</td><td>报错</td><td>是</td></tr><tr><td>w</td><td>文本文件</td><td>只写</td><td>新建文件</td><td>是</td></tr><tr><td>w+</td><td>文本文件</td><td>可读可写</td><td>新建文件</td><td>是</td></tr><tr><td>a</td><td>文本文件</td><td>可写</td><td>新建文件</td><td>否</td></tr><tr><td>a+</td><td>文本文件</td><td>可读可写</td><td>新建文件</td><td>否</td></tr><tr><td>rb</td><td>二进制文件</td><td>只读</td><td>报错</td><td>-</td></tr><tr><td>rb+</td><td>二进制文件</td><td>可读可写</td><td>报错</td><td>是</td></tr><tr><td>wb</td><td>二进制文件</td><td>只写</td><td>新建文件</td><td>是</td></tr><tr><td>wb+</td><td>二进制文件</td><td>可读可写</td><td>新建文件</td><td>是</td></tr><tr><td>ab</td><td>文本二进制文件文件</td><td>可写</td><td>新建文件</td><td>否</td></tr><tr><td>ab+</td><td>二进制文件</td><td>可读可写</td><td>新建文件</td><td>否</td></tr></tbody></table><p>总结：r 和 w 都是覆盖写，a 是追加，r 找不到文件时报错，w 找不到文件则创建文件</p><p>在打开文件之前须提供文件的路径，以及操作模式，Python 通过 open 函数来指定操作的文件以及操作模式，open 函数会返回该文件的对象，以供调用该对象的各种方法来实现文件的操作</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">file</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> open</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(文件路径, 操作模式)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li>read()：读取文件中所有的数据并返回字符串，可以指定参数来决定读取的长度</li><li>readline()：方法单行读取并将指针向下移动，并返回字符串</li><li>readlines()：方法读取全部行的内容，将每一行作为一个元素的列表返回</li><li>write()：写入字符串并返回字符串长度</li><li>writelines()：方法写入可迭代类型（元素必须是字符串类型）</li></ul><div class="hint-container tip"><p class="hint-container-title">提示</p><p>在 Windows 中，写入操作一定要注意编码问题，否则会出现写入乱码的情况，尽量在打开文件的时候指定文件编码</p></div><p>不管是读还是写，都应该在最后调用该文件对象的 close 方法来关闭流，否则数据不会保留</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">file</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">close</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>每次都需要调用 close 方法来关闭文件未免繁琐，Python 提供了 with 关键字来解决文件的自动关闭操作</p><p>文件的读写操作都是依靠指针定位的，随着文件的不断操作，指针位置会不断的改变</p><ul><li>tell()：来获取当前指针在文件中的位置</li><li>seek(offset, whence)：重新定位指针，offset 定义偏移量，whence 定义偏移的位置，为 0 表示从头开始，为 1 表示从当前位置开始，为 2 表示从结尾开始</li></ul><div class="hint-container tip"><p class="hint-container-title">whence 取值</p><p>如果取值不为 0，则应该使用二进制文件打开，否则会报错</p></div><h2 id="正则表达式" tabindex="-1"><a class="header-anchor" href="#正则表达式"><span>正则表达式</span></a></h2><ol><li>search：查找任意位置的匹配项</li><li>match：必须从字符串开头匹配</li><li>fullmatch：整个字符串与正则完全匹配</li></ol>`,38)]))}const r=s(e,[["render",h]]),k=JSON.parse(`{"path":"/python/standard.html","title":"标准功能","lang":"zh-CN","frontmatter":{"title":"标准功能","category":"编程语言","tag":["Python"],"article":false,"description":"这里是 Python 中提供的一些标准功能 input input()函数用来获取键盘输入数据，当运行到该函数时，会等待用户输入数据完毕才会执行其他的语句，同时也可提供字符串来作为输入的提示信息，该函数的返回值即用户输入的数据 警告 input() 函数只能得到字符串 print print()函数向控制台输出数据 输出函数的格式化 有时候我们可能需要...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"WebPage\\",\\"name\\":\\"标准功能\\",\\"description\\":\\"这里是 Python 中提供的一些标准功能 input input()函数用来获取键盘输入数据，当运行到该函数时，会等待用户输入数据完毕才会执行其他的语句，同时也可提供字符串来作为输入的提示信息，该函数的返回值即用户输入的数据 警告 input() 函数只能得到字符串 print print()函数向控制台输出数据 输出函数的格式化 有时候我们可能需要...\\"}"],["meta",{"property":"og:url","content":"https://jinqiu.wang/python/standard.html"}],["meta",{"property":"og:site_name","content":"JQiue's notes"}],["meta",{"property":"og:title","content":"标准功能"}],["meta",{"property":"og:description","content":"这里是 Python 中提供的一些标准功能 input input()函数用来获取键盘输入数据，当运行到该函数时，会等待用户输入数据完毕才会执行其他的语句，同时也可提供字符串来作为输入的提示信息，该函数的返回值即用户输入的数据 警告 input() 函数只能得到字符串 print print()函数向控制台输出数据 输出函数的格式化 有时候我们可能需要..."}],["meta",{"property":"og:type","content":"website"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-06-19T06:51:15.000Z"}],["meta",{"property":"article:tag","content":"Python"}],["meta",{"property":"article:modified_time","content":"2025-06-19T06:51:15.000Z"}]]},"git":{"createdTime":1750315875000,"updatedTime":1750315875000,"contributors":[{"name":"JQiue","username":"JQiue","email":"861947542@qq.com","commits":1,"url":"https://github.com/JQiue"}]},"readingTime":{"minutes":4.61,"words":1383},"filePathRelative":"python/standard.md","excerpt":"<p>这里是 Python 中提供的一些标准功能</p>\\n<h2>input</h2>\\n<p><code>input()</code>函数用来获取键盘输入数据，当运行到该函数时，会等待用户输入数据完毕才会执行其他的语句，同时也可提供字符串来作为输入的提示信息，该函数的返回值即用户输入的数据</p>\\n<div class=\\"language-python line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"python\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\\">input</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">()</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\\">input</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">(</span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\">\\"请输入密码：\\"</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">)</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}`);export{r as comp,k as data};
