import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as e,a,o as n}from"./app-BvEWR9Cw.js";const t={};function r(h,i){return n(),e("div",null,i[0]||(i[0]=[a(`<p>Worker 是一种强大的机制，允许我们在主线程之外创建一个独立的工作线程来执行耗时的任务，从而避免阻塞主线程、提高应用程序的响应速度和性能</p><p>一个 worker 是使用一个构造函数创建的一个对象运行一个命名的 JavaScript 文件。这个文件包含将在工作线程中运行的代码; worker 不能访问 DOM 或 window 对象</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 创建一个 Worker 实例</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;"> worker</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> Worker</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;worker.js&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="消息传递" tabindex="-1"><a class="header-anchor" href="#消息传递"><span>消息传递</span></a></h2><p>Worker 与主线程之间通过 postMessage() 和 onmessage 事件进行消息传递</p><p>main.js</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 向 Worker 发送消息</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">worker</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">postMessage</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;Hello, Worker!&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 监听 Worker 发送的消息</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">worker</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">onmessage</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">event</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">  console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;Received message from Worker:&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">event</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">data</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">};</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>worker.js</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 监听从主线程发来的消息</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">onmessage</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">event</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">  console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;Received message from main thread:&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">event</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">data</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // 处理消息, 并向主线程发送响应</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  const</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;"> result</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> event</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">data</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">toUpperCase</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">  postMessage</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">result</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">};</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="worker-类型" tabindex="-1"><a class="header-anchor" href="#worker-类型"><span>Worker 类型</span></a></h2><p>主流浏览器支持几种不同类型的 Worker</p><h3 id="dedicated-worker" tabindex="-1"><a class="header-anchor" href="#dedicated-worker"><span>Dedicated Worker</span></a></h3><p>这是最常见的 Worker 类型，每个 Dedicated Worker 都有自己独立的线程，只能被创建它的页面访问。通过<code>new Worker(&#39;worker.js&#39;)</code>创建。适用于执行耗时的计算任务或长时间运行的后台操作</p><h3 id="shared-worker" tabindex="-1"><a class="header-anchor" href="#shared-worker"><span>Shared Worker</span></a></h3><p>Shared Worker 可以被多个页面或 tab 共享使用，多个页面可以连接到同一个 Shared Worker 实例，实现进程间通信。通过<code>new SharedWorker(&#39;worker.js&#39;)</code>创建。适用于需要在多个页面或 tab 之间共享数据和状态的场景</p><h3 id="server-worker" tabindex="-1"><a class="header-anchor" href="#server-worker"><span>Server worker</span></a></h3><p>Service Worker 是一种特殊类型的 Worker，运行在浏览器和网页之间的代理层。它可以拦截和处理网络请求，实现离线缓存、推送通知等高级 web 应用功能。通过<code>navigator.serviceWorker.register(&#39;sw.js&#39;)</code>注册，适用于构建渐进式 Web 应用程序(PWA)</p><h2 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料"><span>参考资料</span></a></h2><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Service_Worker_API" target="_blank" rel="noopener noreferrer">https://developer.mozilla.org/zh-CN/docs/Web/API/Service_Worker_API</a></li></ul>`,19)]))}const p=s(t,[["render",r]]),d=JSON.parse(`{"path":"/webapi/worker.html","title":"Worker","lang":"zh-CN","frontmatter":{"title":"Worker","category":"Web","article":false,"description":"Worker 是一种强大的机制，允许我们在主线程之外创建一个独立的工作线程来执行耗时的任务，从而避免阻塞主线程、提高应用程序的响应速度和性能 一个 worker 是使用一个构造函数创建的一个对象运行一个命名的 JavaScript 文件。这个文件包含将在工作线程中运行的代码; worker 不能访问 DOM 或 window 对象 消息传递 Worke...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"WebPage\\",\\"name\\":\\"Worker\\",\\"description\\":\\"Worker 是一种强大的机制，允许我们在主线程之外创建一个独立的工作线程来执行耗时的任务，从而避免阻塞主线程、提高应用程序的响应速度和性能 一个 worker 是使用一个构造函数创建的一个对象运行一个命名的 JavaScript 文件。这个文件包含将在工作线程中运行的代码; worker 不能访问 DOM 或 window 对象 消息传递 Worke...\\"}"],["meta",{"property":"og:url","content":"https://jinqiu.wang/webapi/worker.html"}],["meta",{"property":"og:site_name","content":"JQiue's notes"}],["meta",{"property":"og:title","content":"Worker"}],["meta",{"property":"og:description","content":"Worker 是一种强大的机制，允许我们在主线程之外创建一个独立的工作线程来执行耗时的任务，从而避免阻塞主线程、提高应用程序的响应速度和性能 一个 worker 是使用一个构造函数创建的一个对象运行一个命名的 JavaScript 文件。这个文件包含将在工作线程中运行的代码; worker 不能访问 DOM 或 window 对象 消息传递 Worke..."}],["meta",{"property":"og:type","content":"website"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-06-19T06:51:15.000Z"}],["meta",{"property":"article:modified_time","content":"2025-06-19T06:51:15.000Z"}]]},"git":{"createdTime":1750315875000,"updatedTime":1750315875000,"contributors":[{"name":"JQiue","username":"JQiue","email":"861947542@qq.com","commits":1,"url":"https://github.com/JQiue"}]},"readingTime":{"minutes":1.57,"words":472},"filePathRelative":"webapi/worker.md","excerpt":"<p>Worker 是一种强大的机制，允许我们在主线程之外创建一个独立的工作线程来执行耗时的任务，从而避免阻塞主线程、提高应用程序的响应速度和性能</p>\\n<p>一个 worker 是使用一个构造函数创建的一个对象运行一个命名的 JavaScript 文件。这个文件包含将在工作线程中运行的代码; worker 不能访问 DOM 或 window 对象</p>\\n<div class=\\"language-js line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"js\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\\">// 创建一个 Worker 实例</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">const</span><span style=\\"--shiki-light:#986801;--shiki-dark:#E5C07B\\"> worker</span><span style=\\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\\"> =</span><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\"> new</span><span style=\\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\\"> Worker</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">(</span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\">'worker.js'</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">);</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}`);export{p as comp,d as data};
