import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as e,a,o as t}from"./app-BvEWR9Cw.js";const n={};function p(l,i){return t(),e("div",null,i[0]||(i[0]=[a(`<p>抓包其中涉及三个角色：客户端，代理，目标服务器</p><p>原本正常访问网页或 App 路径是： 客户端-&gt;目标服务器。抓包，其实就加入了一个代理，客户端-&gt;代理-&gt;目标服务器，只有这三者产生一定的联系，才能进行拦截/抓取一些东西，客户端先访问代理，代理把客户端的信息记录下来，代理再去联系目标服务器，进而返回给客户端</p><p>Fiddler 是一个通过代理的方式来进行抓包工具，运行时会在本地建立一个代理服务，默认地址：127.0.0.1:8888，在使用 Fiddler 之前要先安装证书，如果允许远程计算机设备连接，则要去勾选相关配置</p><h2 id="过滤" tabindex="-1"><a class="header-anchor" href="#过滤"><span>过滤</span></a></h2><p>抓包的时候，会抓到其它网站的包，如果想要抓指定网站的包，可以设置过滤器，其他网站就会被屏蔽掉</p><p>在 Filters 中勾选 Use Filters，有两种过滤方式，根据 Hosts 过滤和进程过滤</p><p>选择 Show only following Hosts，并在下面写是要过滤的域名或 ip + 端口号，多个 HOST 之间用<code>;</code>号隔开</p><p>如果要根据进程过滤，则勾选 Show only traffic from，并选择一个应用进程，或者直接在工具栏中拖动进程过滤按钮到需要过滤的窗口程序上</p><p>最后点击 Actions 开始过滤</p><h2 id="断点" tabindex="-1"><a class="header-anchor" href="#断点"><span>断点</span></a></h2><p>在 Rules 中设置断点，断点可以拦截请求和响应：</p><ul><li>前置断点：拦截请求</li><li>后置断点：拦截响应</li></ul><p>添加前置断点之后，所有的请求前面都是红色的，表示被断点，请求有数据，响应没数据，因为还没有发送数据，所有的请求都被拦截中</p><p>后置断点会拦截服务器发送给客户端的数据，可以对数据进行任意的修改，然后再发送给客户端</p><h2 id="mock" tabindex="-1"><a class="header-anchor" href="#mock"><span>mock</span></a></h2><p>可以在 AutoResponder 中设置规则，用来定义响应数据，它不同于修改，是完完全全的重写响应</p><h2 id="弱网" tabindex="-1"><a class="header-anchor" href="#弱网"><span>弱网</span></a></h2><p>甚至可以模拟网络不好的情况，在 FiddlerScript 中找到以下代码：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">if</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (m_SimulateModem) {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // Delay sends by 300ms per KB uploaded.</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">  oSession[</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;request-trickle-delay&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">] </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;300&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> </span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // Delay receives by 150ms per KB downloaded.</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">  oSession[</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;response-trickle-delay&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">] </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;150&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>修改数字即可调整发送或者响应的速度了，最后在 Rulur&gt;Performance 中开启</p><h2 id="参考" tabindex="-1"><a class="header-anchor" href="#参考"><span>参考</span></a></h2><ul><li>HTTP 抓包实战</li></ul>`,22)]))}const d=s(n,[["render",p]]),o=JSON.parse(`{"path":"/sundry/packet-capture.html","title":"网络抓包","lang":"zh-CN","frontmatter":{"title":"网络抓包","category":"知识分享","article":false,"description":"抓包其中涉及三个角色：客户端，代理，目标服务器 原本正常访问网页或 App 路径是： 客户端->目标服务器。抓包，其实就加入了一个代理，客户端->代理->目标服务器，只有这三者产生一定的联系，才能进行拦截/抓取一些东西，客户端先访问代理，代理把客户端的信息记录下来，代理再去联系目标服务器，进而返回给客户端 Fiddler 是一个通过代理的方式来进行抓包...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"WebPage\\",\\"name\\":\\"网络抓包\\",\\"description\\":\\"抓包其中涉及三个角色：客户端，代理，目标服务器 原本正常访问网页或 App 路径是： 客户端->目标服务器。抓包，其实就加入了一个代理，客户端->代理->目标服务器，只有这三者产生一定的联系，才能进行拦截/抓取一些东西，客户端先访问代理，代理把客户端的信息记录下来，代理再去联系目标服务器，进而返回给客户端 Fiddler 是一个通过代理的方式来进行抓包...\\"}"],["meta",{"property":"og:url","content":"https://jinqiu.wang/sundry/packet-capture.html"}],["meta",{"property":"og:site_name","content":"JQiue's notes"}],["meta",{"property":"og:title","content":"网络抓包"}],["meta",{"property":"og:description","content":"抓包其中涉及三个角色：客户端，代理，目标服务器 原本正常访问网页或 App 路径是： 客户端->目标服务器。抓包，其实就加入了一个代理，客户端->代理->目标服务器，只有这三者产生一定的联系，才能进行拦截/抓取一些东西，客户端先访问代理，代理把客户端的信息记录下来，代理再去联系目标服务器，进而返回给客户端 Fiddler 是一个通过代理的方式来进行抓包..."}],["meta",{"property":"og:type","content":"website"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-06-19T06:51:15.000Z"}],["meta",{"property":"article:modified_time","content":"2025-06-19T06:51:15.000Z"}]]},"git":{"createdTime":1750315875000,"updatedTime":1750315875000,"contributors":[{"name":"JQiue","username":"JQiue","email":"861947542@qq.com","commits":1,"url":"https://github.com/JQiue"}]},"readingTime":{"minutes":2.08,"words":625},"filePathRelative":"sundry/packet-capture.md","excerpt":"<p>抓包其中涉及三个角色：客户端，代理，目标服务器</p>\\n<p>原本正常访问网页或 App 路径是： 客户端-&gt;目标服务器。抓包，其实就加入了一个代理，客户端-&gt;代理-&gt;目标服务器，只有这三者产生一定的联系，才能进行拦截/抓取一些东西，客户端先访问代理，代理把客户端的信息记录下来，代理再去联系目标服务器，进而返回给客户端</p>\\n<p>Fiddler 是一个通过代理的方式来进行抓包工具，运行时会在本地建立一个代理服务，默认地址：127.0.0.1:8888，在使用 Fiddler 之前要先安装证书，如果允许远程计算机设备连接，则要去勾选相关配置</p>\\n<h2>过滤</h2>","autoDesc":true}`);export{d as comp,o as data};
