import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c,b as s,d as h,a as p,f as d,w as i,r as v,o,e as l}from"./app-BvEWR9Cw.js";const m={};function b(u,n){const r=v("CodeTabs");return o(),c("div",null,[n[6]||(n[6]=s("p",null,"是一款开源免费，高性能的 Web 服务器，一般用于静态服务和负载均衡以及反向代理：",-1)),n[7]||(n[7]=s("ul",null,[s("li",null,"作为 Web 服务器：相比 Apache，Nginx 占用更少的资源，支持更多的并发连接，体现更高的效率，这点使 Nginx 尤其受到虚拟主机提供商的欢迎。能够支持高达 50,000 个并发连接数的响应"),s("li",null,"作为负载均衡服务器：Nginx 既可以在内部直接支持 Rails 和 PHP，也可以支持作为 HTTP 代理服务器对外进行服务。Nginx 用 C 编写, 不论是系统资源开销还是 CPU 使用效率都比 Perl 要好的多"),s("li",null,"作为邮件代理服务器: Nginx 同时也是一个非常优秀的邮件代理服务器（最早开发这个产品的目的之一也是作为邮件代理服务器），Last.fm 描述了成功并且美妙的使用经验")],-1)),h(r,{id:"20",data:[{id:"Ubuntu"},{id:"Arch"},{id:"Alpine"}]},{title0:i(({value:a,isActive:e})=>n[0]||(n[0]=[l("Ubuntu")])),title1:i(({value:a,isActive:e})=>n[1]||(n[1]=[l("Arch")])),title2:i(({value:a,isActive:e})=>n[2]||(n[2]=[l("Alpine")])),tab0:i(({value:a,isActive:e})=>n[3]||(n[3]=[s("div",{class:"language-sh line-numbers-mode","data-highlighter":"shiki","data-ext":"sh",style:{"--shiki-light":"#383A42","--shiki-dark":"#abb2bf","--shiki-light-bg":"#FAFAFA","--shiki-dark-bg":"#282c34"}},[s("pre",{class:"shiki shiki-themes one-light one-dark-pro vp-code"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#4078F2","--shiki-dark":"#61AFEF"}},"apt"),s("span",{style:{"--shiki-light":"#50A14F","--shiki-dark":"#98C379"}}," install"),s("span",{style:{"--shiki-light":"#50A14F","--shiki-dark":"#98C379"}}," nginx")])])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"})])],-1)])),tab1:i(({value:a,isActive:e})=>n[4]||(n[4]=[s("div",{class:"language-sh line-numbers-mode","data-highlighter":"shiki","data-ext":"sh",style:{"--shiki-light":"#383A42","--shiki-dark":"#abb2bf","--shiki-light-bg":"#FAFAFA","--shiki-dark-bg":"#282c34"}},[s("pre",{class:"shiki shiki-themes one-light one-dark-pro vp-code"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#4078F2","--shiki-dark":"#61AFEF"}},"pacman"),s("span",{style:{"--shiki-light":"#986801","--shiki-dark":"#D19A66"}}," -S"),s("span",{style:{"--shiki-light":"#50A14F","--shiki-dark":"#98C379"}}," nginx")])])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"})])],-1)])),tab2:i(({value:a,isActive:e})=>n[5]||(n[5]=[s("div",{class:"language-sh line-numbers-mode","data-highlighter":"shiki","data-ext":"sh",style:{"--shiki-light":"#383A42","--shiki-dark":"#abb2bf","--shiki-light-bg":"#FAFAFA","--shiki-dark-bg":"#282c34"}},[s("pre",{class:"shiki shiki-themes one-light one-dark-pro vp-code"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#4078F2","--shiki-dark":"#61AFEF"}},"apk"),s("span",{style:{"--shiki-light":"#50A14F","--shiki-dark":"#98C379"}}," add"),s("span",{style:{"--shiki-light":"#50A14F","--shiki-dark":"#98C379"}}," nginx")])])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"})])],-1)])),_:1}),n[8]||(n[8]=p(`<p>在 Ubuntu 中安装后的目录结构大致如下：</p><ul><li>程序执行在<code>/usr/sbin/nginx</code></li><li>所有的配置文件在<code>/etc/nginx</code></li><li>日志文件在<code>/var/log/nginx</code></li><li>默认的虚拟主机目录在<code>/var/www</code>或<code>/var/www/html</code></li></ul><p>在 Windows 中目录结构大致如下：</p><ul><li>程序文件在安装的根目录</li><li>配置文件在<code>conf</code></li><li>日志文件在<code>logs</code></li><li>默认的虚拟主机目录在<code>html</code></li></ul><p>这是一些常用到的命令：</p><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">nginx</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> # 启动</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">nginx</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -v</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> # 查看版本号</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">nginx</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -t</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> # 检查配置文件语法错误</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">nginx</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -s</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> reload</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> # 重新应用配置文件</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">nginx</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -s</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> stop</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> # 快速关闭</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">nginx</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -s</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> quit</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> # 等待工作进程处理完成后关闭</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Nginx 采用的是简单文件格式的配置文件，下面是指令的一些特性</p><ul><li>注释 - 以<code>#</code>开头</li><li>简单指令 - 以分号结尾</li><li>块指令 - 以<code>{}</code>包围</li><li>包含指令 - <code>include</code></li></ul><div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>events</span></span>
<span class="line"><span>{</span></span>
<span class="line"><span>  # ...</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span>http</span></span>
<span class="line"><span>{</span></span>
<span class="line"><span>  server</span></span>
<span class="line"><span>  {</span></span>
<span class="line"><span>    location path</span></span>
<span class="line"><span>    {</span></span>
<span class="line"><span>      # ...</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>    location path</span></span>
<span class="line"><span>    {</span></span>
<span class="line"><span>     # ...</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>  server</span></span>
<span class="line"><span>  {</span></span>
<span class="line"><span>    # ...</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="虚拟主机" tabindex="-1"><a class="header-anchor" href="#虚拟主机"><span>虚拟主机</span></a></h2><p>虚拟主机是一种特殊的软硬件技术，它可以将网络上的每一台计算机分成多个虚拟主机，每个虚拟主机可以独立对外提供 Web 服务，这样就可以实现一台主机对外提供多个 Web 服务，每个虚拟主机之间是独立的，互不影响。Nginx 支持 3 种类型的虚拟主机配置：</p><ul><li>基于域名的虚拟主机，server_name 来区分虚拟主机——应用：web 网站</li><li>基于 ip 的虚拟主机，一个主机绑定多个 ip 地址</li><li>基于端口的虚拟主机，端口来区分虚拟主机——应用：公司内部网站，外部网站的管理后台</li></ul><h2 id="托管静态资源" tabindex="-1"><a class="header-anchor" href="#托管静态资源"><span>托管静态资源</span></a></h2><p>很简单，这是是一个基于域名的虚拟主机</p><div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>server {</span></span>
<span class="line"><span>  listen 80;</span></span>
<span class="line"><span>  server_name one.com;</span></span>
<span class="line"><span>  location / {</span></span>
<span class="line"><span>    root /dist;</span></span>
<span class="line"><span>    index index.html;</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>server {</span></span>
<span class="line"><span>  listen 80;</span></span>
<span class="line"><span>  server_name two.com;</span></span>
<span class="line"><span>  location / {</span></span>
<span class="line"><span>    root /dist;</span></span>
<span class="line"><span>    index index.html;</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>基于 IP 的主机</p><div class="language-plain line-numbers-mode" data-highlighter="shiki" data-ext="plain" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>server {</span></span>
<span class="line"><span>  listen 80;</span></span>
<span class="line"><span>  server_name 192.168.2.0;</span></span>
<span class="line"><span>  location / {</span></span>
<span class="line"><span>    root /dist;</span></span>
<span class="line"><span>    index index.html;</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>server {</span></span>
<span class="line"><span>  listen 80;</span></span>
<span class="line"><span>  server_name 192.168.2.1;</span></span>
<span class="line"><span>  location / {</span></span>
<span class="line"><span>    root /dist;</span></span>
<span class="line"><span>  index index.html;</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>基于端口的主机</p><div class="language-plain line-numbers-mode" data-highlighter="shiki" data-ext="plain" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>server {</span></span>
<span class="line"><span>  listen 80;</span></span>
<span class="line"><span>  server_name one.com;</span></span>
<span class="line"><span>  location / {</span></span>
<span class="line"><span>    root /dist;</span></span>
<span class="line"><span>    index index.html;</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span>server {</span></span>
<span class="line"><span>  listen 8000;</span></span>
<span class="line"><span>  server_name one.com;</span></span>
<span class="line"><span>  location / {</span></span>
<span class="line"><span>    root /dist;</span></span>
<span class="line"><span>    index index.html;</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="内置变量" tabindex="-1"><a class="header-anchor" href="#内置变量"><span>内置变量</span></a></h2><table><thead><tr><th>变量名</th><th>功能</th></tr></thead><tbody><tr><td><code>$host</code></td><td>请求信息中的 Host，如果请求中没有 Host 行，则等于设置的服务器名</td></tr><tr><td><code>$request_method</code></td><td>客户端请求类型，如 GET、POST</td></tr><tr><td><code>$args</code></td><td>请求中的参数</td></tr><tr><td><code>$content_length</code></td><td>请求头中的 Content-length 字段</td></tr><tr><td><code>$http_user_agent</code></td><td>客户端 agent 信息</td></tr><tr><td><code>$http_cookie</code></td><td>客户端 cookie 信息</td></tr><tr><td><code>$remote_addr</code></td><td>客户端的 IP 地址</td></tr><tr><td><code>$remote_port</code></td><td>客户端的端口</td></tr><tr><td><code>$server_protocol</code></td><td>请求使用的协议，如 HTTP/1.0、HTTP/1.1</td></tr><tr><td><code>$server_addr</code></td><td>服务器地址</td></tr><tr><td><code>$server_name</code></td><td>服务器名称</td></tr><tr><td><code>$server_port</code></td><td>服务器的端口号</td></tr></tbody></table><h2 id="反向代理" tabindex="-1"><a class="header-anchor" href="#反向代理"><span>反向代理</span></a></h2><p>正向代理是为客户端服务的，客户端可以通过正向代理访问它本身无法访问到的服务器。对于服务端来说，服务端无法区分是否来自代理访问还是真实客户端访问</p><p>反向代理是为服务端服务的，反向代理可以帮助服务端接受请求，进行请求转发，负载均衡等。反向代理隐藏了真实的服务端，这对于客户端来说是没有感知的，就像拨打<code>10086</code>一样，每次接电话的客服并不是同一个人，而是由<code>10086</code>分配一个客服，<code>10086</code>就承担着反向代理的角色</p><p>Nginx 反向代理靠<code>proxy_pass</code>项来完成，比如：</p><div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>server {</span></span>
<span class="line"><span>  listen 80;</span></span>
<span class="line"><span>  server_name jinqiu.wang;</span></span>
<span class="line"><span>  location / {</span></span>
<span class="line"><span>    proxy_pass http://127.0.0.1:8888;</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个配置就是说，将来自<code>jinqiu.wang:80</code>端口的请求，代理到<code>http://127.0.0.1:8888</code>上面，由<code>http://127.0.0.1:8888</code>处理真正的请求</p><p>在使用反向代理的时候，每次请求的 IP 都是本地 IP，这是因为 Nginx 所在的运行环境所致，导致处理方永远获得的都是 Nginx 的地址，如果有获取用户 IP 的需求，可以增加配置项</p><div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>server {</span></span>
<span class="line"><span>  listen 80;</span></span>
<span class="line"><span>  server_name jinqiu.wang;</span></span>
<span class="line"><span>  location / {</span></span>
<span class="line"><span>    proxy_pass http://127.0.0.1:8888;</span></span>
<span class="line"><span>    proxy_set_header X-Real-IP $remote_addr;</span></span>
<span class="line"><span>    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>意思是说，Nginx 将请求方的地址添加到请求头中，因此真正处理请求的机器，可以通过这个请求头来获取请求方的真实 IP</p><div class="hint-container caution"><p class="hint-container-title">警告</p><p>Nginx 无法分辨请求方的 IP 是否真实，也可能是伪造的</p></div><h2 id="设置响应头" tabindex="-1"><a class="header-anchor" href="#设置响应头"><span>设置响应头</span></a></h2><p>比如跨域请求可使用<code>add_header</code>进行添加跨域头来允许</p><div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>server {</span></span>
<span class="line"><span>  listen 80;</span></span>
<span class="line"><span>  server_name httptest.jinqiu.wang;</span></span>
<span class="line"><span>  location / {</span></span>
<span class="line"><span>    proxy_pass http://127.0.0.1:8888;</span></span>
<span class="line"><span>    add_header Access-Control-Allow-Origin *;</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="请求体大小" tabindex="-1"><a class="header-anchor" href="#请求体大小"><span>请求体大小</span></a></h2><p>如果上传的文件过大，会返回 413 错误，Nginx 默认是 1m 大小的限制，但是可以添加<code>client_max_body_size</code>进行修改</p><div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>server {</span></span>
<span class="line"><span>  listen 80;</span></span>
<span class="line"><span>  server_name space.jinqiu.wang;</span></span>
<span class="line"><span>  location / {</span></span>
<span class="line"><span>    client_max_body_size 50m;</span></span>
<span class="line"><span>    proxy_pass http://127.0.0.1:8889;</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="带宽速率限制" tabindex="-1"><a class="header-anchor" href="#带宽速率限制"><span>带宽速率限制</span></a></h2><p>默认情况下，有多少带宽，Nginx 就能消耗掉多少，Nginx 允许限制来自 HTTP 连接所使用的最大速率，比如使用<code>limit_rate</code>就可以限制下载速度：</p><div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>server {</span></span>
<span class="line"><span>  listen 80;</span></span>
<span class="line"><span>  server_name space.jinqiu.wang;</span></span>
<span class="line"><span>  location / {</span></span>
<span class="line"><span>    limit_rate 100k;</span></span>
<span class="line"><span>    client_max_body_size 50m;</span></span>
<span class="line"><span>    proxy_pass http://127.0.0.1:8889;</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>甚至可以优化一下，比如前 10m 不限速，超过后开始限速：</p><div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>server {</span></span>
<span class="line"><span>  listen 80;</span></span>
<span class="line"><span>  server_name space.jinqiu.wang;</span></span>
<span class="line"><span>  location / {</span></span>
<span class="line"><span>    limit_rate_after 10m;</span></span>
<span class="line"><span>    limit_rate 100k;</span></span>
<span class="line"><span>    client_max_body_size 50m;</span></span>
<span class="line"><span>    proxy_pass http://127.0.0.1:8889;</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="请求速率限制" tabindex="-1"><a class="header-anchor" href="#请求速率限制"><span>请求速率限制</span></a></h2><p>默认情况下，Nginx 会尽可能的处理所有的请求，但 Nginx 允许限制来自某个 ip 的请求速率：</p><div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>limit_req_zone $binary_remote_addr zone=mylimit:50m rate=1r/s;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>server {</span></span>
<span class="line"><span>  listen 80;</span></span>
<span class="line"><span>  server_name example.com;</span></span>
<span class="line"><span>  limit_req zone=mylimit burst=5;</span></span>
<span class="line"><span>  location / {</span></span>
<span class="line"><span>    root /root/meilisearch-ui/;</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中，客户端发送一个请求到配置了<code>limit_req</code>的<code>location</code>，Nginx 使用<code>limit_req</code>中引用的<code>zone</code>名称，并在该区域中查找基于<code>limit_req_zone</code>中定义的<code>key</code>（例如客户端 IP）的状态信息。Nginx 检查该客户端在区域中记录的请求速率，如果当前请求速率低于或等于区域设定的<code>rate</code>请求会被正常处理。如果当前请求速率超过了区域设定的<code>rate</code>，Nginx 会检查 limit_req 指令中的<code>burst</code>参数，如果超出的请求数量仍在<code>burst</code>限制内，如果指定了<code>nodelay</code>，请求会立即处理。但请注意，如果持续超出速率，后续没有<code>burst</code>缓冲的请求仍会被拒绝。如果没有指定<code>nodelay</code>(默认 delay)，请求会被放入一个内部队列，并按照区域设定的<code>rate</code>逐个被处理。这会导致请求响应延迟，如果超出的请求数量超出了<code>burst</code>限制:，Nginx 会立即拒绝该请求，通常返回 503 Service Unavailable 错误</p><h2 id="gzip-压缩传输" tabindex="-1"><a class="header-anchor" href="#gzip-压缩传输"><span>gzip 压缩传输</span></a></h2><p>gzip 压缩能够提高网站速度节约网站流量，开启 gzip 之后的网站加载速度几乎是未开启的两倍，所以非常推荐开启，将下面的内容添加到配置文件，重启 Nginx</p><div class="language-plain line-numbers-mode" data-highlighter="shiki" data-ext="plain" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>gzip on;</span></span>
<span class="line"><span>gzip_disable &quot;msie6&quot;;</span></span>
<span class="line"><span>gzip_vary on;</span></span>
<span class="line"><span>gzip_proxied any;</span></span>
<span class="line"><span>gzip_comp_level 6;</span></span>
<span class="line"><span>gzip_buffers 16 8k;</span></span>
<span class="line"><span>gzip_http_version 1.1;</span></span>
<span class="line"><span>gzip_min_length 256;</span></span>
<span class="line"><span>gzip_types application/atom+xml application/geo+json application/javascript application/x-javascript application/json application/ld+json application/manifest+json application/rdf+xml application/rss+xml application/xhtml+xml application/xml font/eot font/otf font/ttf image/svg+xml text/css text/javascript text/plain text/xml;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>gzip_comp_level</code>表示压缩等级，越小压缩比越低，取值为<code>0-9</code>，一般取<code>6</code></p><p>只需要检查响应头是否包含<code>content-encoding: gzip</code>即可</p><h2 id="负载均衡" tabindex="-1"><a class="header-anchor" href="#负载均衡"><span>负载均衡</span></a></h2><p>负载均衡是为了解决某一个服务挂掉不能访问，而影响用户的体验，一般来说 Nginx 的配置会将请求分发到同一个服务，如果挂掉了话仍然会分发给这个服务，这时候就需要负载均衡</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>upstream youngfitapp {</span></span>
<span class="line"><span>  server 192.168.1.0:8080;</span></span>
<span class="line"><span>  server 192.168.1.1:8080;</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span>server {</span></span>
<span class="line"><span>  listen 80;</span></span>
<span class="line"><span>  server_name localhost;</span></span>
<span class="line"><span>  location / {</span></span>
<span class="line"><span>    proxy_pass  http://youngfitapp;</span></span>
<span class="line"><span>    proxy_set_header Host $http_host;</span></span>
<span class="line"><span>    proxy_set_header X-Real-IP $remote_addr;</span></span>
<span class="line"><span>    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>upstream</code>有四种负载均衡调度算法：</p><ol><li>轮询 - 每个请求按时间顺序逐一分配到不同的后端服务器，这是默认的</li><li>ip_hash - 每个请求按访问 IP 的 hash 结果分配，同一个 IP 客户端固定访问一个后端服务器。可以保证来自同一 IP 的请求被打到固定的机器上，可以解决 session 问题</li><li>url_hash - 按访问 url 的 hash 结果来分配请求，使每个 url 定向到同一个后端服务器</li><li>fair - 依据页面大小和加载时间长短智能地进行负载均衡，也就是根据后端服务器的响应时间来分配请求，响应时间短的优先分配</li></ol><p>默认情况下就是轮询，此时权重都为 1，分发顺序为：ABABABABAB...</p><div class="language-plain line-numbers-mode" data-highlighter="shiki" data-ext="plain" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>upstream youngfitapp { </span></span>
<span class="line"><span>  server 192.168.1.0:8080;</span></span>
<span class="line"><span>  server 192.168.1.1:8080;</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>也可以更改权重，比如下面的顺序为：ABBABBABBABB...</p><div class="language-plain line-numbers-mode" data-highlighter="shiki" data-ext="plain" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>upstream youngfitapp {</span></span>
<span class="line"><span>  server 192.168.1.0:8080 weight=1;</span></span>
<span class="line"><span>  server 192.168.1.1:8080 weight=2;</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>ip_hash</p><div class="language-plain line-numbers-mode" data-highlighter="shiki" data-ext="plain" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>upstream youngfitapp {</span></span>
<span class="line"><span>  ip_hash;</span></span>
<span class="line"><span>  server 192.168.62.157:8080;</span></span>
<span class="line"><span>  server 192.168.62.158:8080;</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>url_hash</p><p>upstream youngfitapp { url_hash; server 192.168.62.157:8080; server 192.168.62.158:8080; }</p><p>可以为指定的服务器设置状态：</p><ul><li>down - 暂时不参与负载均衡</li><li>backup - 预留的备份机器，只有当所有的非 backup 挂掉或者忙的时候，才会请求</li></ul><p>可以指定某个服务器为热备，当其他服务器挂掉时才使用该服务器提供服务</p><div class="language-plain line-numbers-mode" data-highlighter="shiki" data-ext="plain" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>upstream youngfitapp {</span></span>
<span class="line"><span>  server 192.168.1.0:8080;</span></span>
<span class="line"><span>  server 192.168.1.1:8080;</span></span>
<span class="line"><span>  server 192.168.1.2:8080 down;</span></span>
<span class="line"><span>  server 192.168.1.3:8080 backup;</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="location" tabindex="-1"><a class="header-anchor" href="#location"><span>location</span></a></h2><table><thead><tr><th>修饰符</th><th>含义</th></tr></thead><tbody><tr><td>=</td><td>表示精确匹配，优先级也是最高的</td></tr><tr><td>^~</td><td>表示 url 以某个常规字符串开头，理解为匹配 url 路径即可</td></tr><tr><td>~</td><td>表示区分大小写的正则匹配</td></tr><tr><td>~*</td><td>表示不区分大小写的正则匹配</td></tr><tr><td>!~</td><td>表示区分大小写不匹配的正则</td></tr><tr><td>!~*</td><td>表示不区分大小写不匹配的正则</td></tr><tr><td>/</td><td>通用匹配，任何请求都会匹配到</td></tr></tbody></table><p>示例</p><div class="language-plain line-numbers-mode" data-highlighter="shiki" data-ext="plain" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>location / {</span></span>
<span class="line"><span>　　# 匹配任何以 / 开始的查询，但是正则表达式与一些较长的字符串将被首先匹配</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span>location = / {</span></span>
<span class="line"><span>　　# 只匹配 / 的查询</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span>location ^~ /images/ {</span></span>
<span class="line"><span>　　# 匹配任何以 /images/ 开始的查询并且停止搜索，不检查正则表达式</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span>location ~* \\.(gif|jpg|jpeg)$ {</span></span>
<span class="line"><span>　　# 匹配任何以 gif, jpg, or jpeg 结尾的文件</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="配置-https" tabindex="-1"><a class="header-anchor" href="#配置-https"><span>配置 HTTPS</span></a></h2><p>必须先有 SSL 证书，通常在第三方申请，下载私钥和证书在 Nginx 中配置</p><div class="language-plain line-numbers-mode" data-highlighter="shiki" data-ext="plain" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>server {</span></span>
<span class="line"><span>  listen 443 ssl;</span></span>
<span class="line"><span>  server_name jinqiu.wang;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>  ssl on;</span></span>
<span class="line"><span>  ssl_certificate      jinqiu.wang.pem;</span></span>
<span class="line"><span>  ssl_certificate_key  jinqiu.wang.key;</span></span>
<span class="line"><span>  ssl_session_timeout  5m;</span></span>
<span class="line"><span>  ssl_protocols        TLSv1 TLSv1.1 TLSv1.2;</span></span>
<span class="line"><span>  ssl_ciphers          ALL:!ADH:!EXPORT56:RC4+RSA:+HIGH:+MEDIUM:+LOW:+SSLv2:+EXP;</span></span>
<span class="line"><span>  ssl_prefer_server_ciphers on;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>  location / {</span></span>
<span class="line"><span>    root  /dist;</span></span>
<span class="line"><span>    index index.html index.htm;</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="地址重写" tabindex="-1"><a class="header-anchor" href="#地址重写"><span>地址重写</span></a></h2>`,76)),d(" todo "),n[9]||(n[9]=s("h2",{id:"动静分离",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#动静分离"},[s("span",null,"动静分离")])],-1)),d(" todo "),n[10]||(n[10]=p(`<h2 id="自动-https" tabindex="-1"><a class="header-anchor" href="#自动-https"><span>自动 HTTPS</span></a></h2><p>Nginx 可以通过两种方式来自动申请证书</p><p>安装 cerbot 以及 certbot-nginx，这需要 Python 环境</p><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">pacman</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -S</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> certbot</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> certbot-nginx</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>配置 Nginx，比如<code>your.conf</code></p><div class="language-plain line-numbers-mode" data-highlighter="shiki" data-ext="plain" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>server {</span></span>
<span class="line"><span>  listen 80;</span></span>
<span class="line"><span>  server_name yourdomain.com www.yourdomain.com;</span></span>
<span class="line"><span>  return 301 https://$server_name$request_uri;</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>server {</span></span>
<span class="line"><span>  listen 443 ssl;</span></span>
<span class="line"><span>  server_name yourdomain.com www.yourdomain.com;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>  ssl_protocols TLSv1.2 TLSv1.3;</span></span>
<span class="line"><span>  ssl_prefer_server_ciphers on;</span></span>
<span class="line"><span>  ssl_ciphers EECDH+AESGCM:EDH+AESGCM;</span></span>
<span class="line"><span>  ssl_ecdh_curve secp384r1;</span></span>
<span class="line"><span>  ssl_session_timeout  10m;</span></span>
<span class="line"><span>  ssl_session_cache shared:SSL:10m;</span></span>
<span class="line"><span>  ssl_session_tickets off;</span></span>
<span class="line"><span>  ssl_stapling on;</span></span>
<span class="line"><span>  ssl_stapling_verify on;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>  location / {</span></span>
<span class="line"><span>      proxy_pass http://localhost:YOUR_APP_PORT;</span></span>
<span class="line"><span>      proxy_set_header Host $host;</span></span>
<span class="line"><span>      proxy_set_header X-Real-IP $remote_addr;</span></span>
<span class="line"><span>      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span></span>
<span class="line"><span>      proxy_set_header X-Forwarded-Proto $scheme;</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>获取证书，这一步需要验证域名所有权，否则无法申请成功，如果申请成功，将会修改对应的 Nginx 配置文件添加对应证书文件</p><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">sudo</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> certbot</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --nginx</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -d</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> yourdomain.com</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -d</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> www.yourdomain.com</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Let&#39;s Encrypt 的证书有效期为 90 天，certbot 已经提供自动续期服务，开启自动续期</p><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">systemctl</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> enable</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> certbot-renew.timer</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">systemctl</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> start</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> certbot-renew.timer</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>使用 acme.sh 获取证书</p><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 安装</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">curl</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> https://get.acme.sh</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> | </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">sh</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -s</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> email=my@example.com</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 从 nginx 中申请证书</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">acme.sh</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --issue</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --nginx</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -d</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> example.com</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -d</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> www.example.com</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -d</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> cp.example.com</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 安装证书</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">acme.sh</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --install-cert</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -d</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> example.com</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> \\</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">--key-file       </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">/path/to/keyfile/in/nginx/key.pem</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">  \\</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">--fullchain-file </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">/path/to/fullchain/nginx/cert.pem</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> \\</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">--reloadcmd     </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;service nginx reload&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="热部署" tabindex="-1"><a class="header-anchor" href="#热部署"><span>热部署</span></a></h2><p>热部署也被称为平滑升级，是指在不停止当前 Nginx 服务的情况下，更新 Nginx 的可执行文件或重新加载其配置文件，这一特性对于需要保持高可用性的 Web 服务至关重要，因为它允许在不中断用户请求的情况下进行维护或版本升级</p><p>热部署的核心原理依赖于 Nginx 的主进程（Master Process）和工作进程（Worker Processes）架构以及操作系统信号的运用，Nginx 主进程负责管理工作进程，接收信号，并执行特权操作，而工作进程则负责处理实际的网络连接和请求</p><p>实现 Nginx 热部署的步骤如下：</p><ol><li>使用新的 Nginx 可执行文件启动一个新的主进程，新的主进程会读取配置文件并创建新的工作进程</li><li>向正在运行的旧 Nginx 主进程发送 USR2 信号，这个信号通知老的主进程即将进行升级，收到 USR2 信号后，旧的主进程会启动一个新的 Nginx 主进程，该新主进程使用新的可执行文件和当前的配置文件，此时，新老主进程会并存，并且它们各自生成的工作进程会共享监听的端口，同时处理进来的请求，而不会发生冲突</li><li>确认新的 Nginx 进程正常运行后，向旧的主进程发送 WINCH 信号，这个信号会使旧的主进程开始优雅地关闭其所有工作进程，旧的工作进程会等待处理完当前的请求后再退出</li><li>当旧的工作进程全部退出后，只有新的 Nginx 工作进程在处理请求，此时，升级基本完成</li><li>如果升级成功并符合预期，可以向旧的主进程发送 QUIT 信号，使其优雅地退出</li></ol><p>这个过程的优势在于，在整个升级过程中，Nginx 服务始终在运行，能够持续处理用户请求。同时，由于旧的主进程在升级成功前并不会立即退出，这提供了一个快速回滚的机制：如果新的 Nginx 版本有问题，可以通过向新的主进程发送终止信号（如 TERM）并利用仍在运行的老主进程重新生成工作进程来恢复到旧版本</p><h2 id="日志切割" tabindex="-1"><a class="header-anchor" href="#日志切割"><span>日志切割</span></a></h2><h2 id="反向代理缓存" tabindex="-1"><a class="header-anchor" href="#反向代理缓存"><span>反向代理缓存</span></a></h2><p>反向代理缓存是指 Nginx 作为反向代理服务器时，将从后端服务器获取的响应数据缓存到本地，以便在后续请求中直接返回缓存的数据，而不必再次请求后端服务器，这样可以显著提高响应速度，减轻后端服务器的负担</p><div class="language-plain line-numbers-mode" data-highlighter="shiki" data-ext="plain" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>http {</span></span>
<span class="line"><span>    # 定义缓存存储区域</span></span>
<span class="line"><span>    # 指定缓存文件的存储路径、用于哈希的文件级别、存储缓存密钥的共享内存区域名称和大小、</span></span>
<span class="line"><span>    # 最大缓存大小、非活动缓存的清理时间、以及多久检查一次缓存以删除非活动和超出大小限制的缓存。</span></span>
<span class="line"><span>    proxy_cache_path /var/cache/nginx levels=1:2 keys_zone=my_cache:10m max_size=10g inactive=60m use_temp_path=off;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    server {</span></span>
<span class="line"><span>        listen 80;</span></span>
<span class="line"><span>        server_name example.com;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>        location / {</span></span>
<span class="line"><span>            # 启用并指定使用哪个缓存区域</span></span>
<span class="line"><span>            proxy_cache my_cache;</span></span>
<span class="line"><span>            # 定义生成缓存密钥的规则。这里使用 scheme (http/https) + 请求方法 + 请求 URI</span></span>
<span class="line"><span>            proxy_cache_key &quot;$scheme$request_method$request_uri&quot;;</span></span>
<span class="line"><span>            # 定义不同状态码的响应应该被缓存多久</span></span>
<span class="line"><span>            # 对于 200 和 304 状态码的响应，缓存 10 分钟 (10m)</span></span>
<span class="line"><span>            # 对于 301 和 302 状态码的响应，缓存 24 小时 (24h)</span></span>
<span class="line"><span>            # 对于任意状态码的响应，至少缓存 5 分钟 (5m)</span></span>
<span class="line"><span>            proxy_cache_valid 200 304 10m;</span></span>
<span class="line"><span>            proxy_cache_valid 301 302 24h;</span></span>
<span class="line"><span>            proxy_cache_valid any 5m;</span></span>
<span class="line"><span>            # 定义在哪些条件下不从缓存中获取响应</span></span>
<span class="line"><span>            # 例如，如果请求头中包含 Cache-Control: no-cache, Pragma: no-cache 或 Authorization，则绕过缓存</span></span>
<span class="line"><span>            proxy_cache_bypass $http_pragma $http_authorization;</span></span>
<span class="line"><span>            # 定义在哪些条件下不对响应进行缓存</span></span>
<span class="line"><span>            # 例如，如果请求头中包含 Cache-Control: no-cache 或 Pragma: no-cache，则不缓存此响应</span></span>
<span class="line"><span>            proxy_no_cache $http_pragma $http_authorization;</span></span>
<span class="line"><span>            # http://backend_servers</span></span>
<span class="line"><span>            proxy_pass http://backend_servers;</span></span>
<span class="line"><span>            # 可选：添加一个响应头，用于调试和了解缓存状态（HIT, MISS, BYPASS等）</span></span>
<span class="line"><span>            add_header X-Cache-Status $upstream_cache_status;</span></span>
<span class="line"><span>            # 设置代理连接和发送/读取响应的超时时间</span></span>
<span class="line"><span>            proxy_connect_timeout 60s;</span></span>
<span class="line"><span>            proxy_send_timeout 60s;</span></span>
<span class="line"><span>            proxy_read_timeout 60s;</span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,22))])}const y=t(m,[["render",b]]),A=JSON.parse(`{"path":"/sundry/nginx.html","title":"Nginx","lang":"zh-CN","frontmatter":{"title":"Nginx","article":false,"description":"是一款开源免费，高性能的 Web 服务器，一般用于静态服务和负载均衡以及反向代理： 作为 Web 服务器：相比 Apache，Nginx 占用更少的资源，支持更多的并发连接，体现更高的效率，这点使 Nginx 尤其受到虚拟主机提供商的欢迎。能够支持高达 50,000 个并发连接数的响应 作为负载均衡服务器：Nginx 既可以在内部直接支持 Rails ...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"WebPage\\",\\"name\\":\\"Nginx\\",\\"description\\":\\"是一款开源免费，高性能的 Web 服务器，一般用于静态服务和负载均衡以及反向代理： 作为 Web 服务器：相比 Apache，Nginx 占用更少的资源，支持更多的并发连接，体现更高的效率，这点使 Nginx 尤其受到虚拟主机提供商的欢迎。能够支持高达 50,000 个并发连接数的响应 作为负载均衡服务器：Nginx 既可以在内部直接支持 Rails ...\\"}"],["meta",{"property":"og:url","content":"https://jinqiu.wang/sundry/nginx.html"}],["meta",{"property":"og:site_name","content":"JQiue's notes"}],["meta",{"property":"og:title","content":"Nginx"}],["meta",{"property":"og:description","content":"是一款开源免费，高性能的 Web 服务器，一般用于静态服务和负载均衡以及反向代理： 作为 Web 服务器：相比 Apache，Nginx 占用更少的资源，支持更多的并发连接，体现更高的效率，这点使 Nginx 尤其受到虚拟主机提供商的欢迎。能够支持高达 50,000 个并发连接数的响应 作为负载均衡服务器：Nginx 既可以在内部直接支持 Rails ..."}],["meta",{"property":"og:type","content":"website"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-06-19T06:51:15.000Z"}],["meta",{"property":"article:modified_time","content":"2025-06-19T06:51:15.000Z"}]]},"git":{"createdTime":1750315875000,"updatedTime":1750315875000,"contributors":[{"name":"JQiue","username":"JQiue","email":"861947542@qq.com","commits":1,"url":"https://github.com/JQiue"}]},"readingTime":{"minutes":13.71,"words":4114},"filePathRelative":"sundry/nginx.md","excerpt":"<p>是一款开源免费，高性能的 Web 服务器，一般用于静态服务和负载均衡以及反向代理：</p>\\n<ul>\\n<li>作为 Web 服务器：相比 Apache，Nginx 占用更少的资源，支持更多的并发连接，体现更高的效率，这点使 Nginx 尤其受到虚拟主机提供商的欢迎。能够支持高达 50,000 个并发连接数的响应</li>\\n<li>作为负载均衡服务器：Nginx 既可以在内部直接支持 Rails 和 PHP，也可以支持作为 HTTP 代理服务器对外进行服务。Nginx 用 C 编写, 不论是系统资源开销还是 CPU 使用效率都比 Perl 要好的多</li>\\n<li>作为邮件代理服务器: Nginx 同时也是一个非常优秀的邮件代理服务器（最早开发这个产品的目的之一也是作为邮件代理服务器），Last.fm 描述了成功并且美妙的使用经验</li>\\n</ul>","autoDesc":true}`);export{y as comp,A as data};
