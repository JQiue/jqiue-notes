import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,a as e,o as t}from"./app-BvEWR9Cw.js";const n={};function p(h,i){return t(),a("div",null,i[0]||(i[0]=[e(`<h2 id="多媒体领域基础" tabindex="-1"><a class="header-anchor" href="#多媒体领域基础"><span>多媒体领域基础</span></a></h2><h3 id="容器" tabindex="-1"><a class="header-anchor" href="#容器"><span>容器</span></a></h3><p>容器（Container）用于封装视频、音频和其他数据的文件格式，常见格式：MP4, MKV, AVI, WebM。FFmpeg 通过文件扩展名指定，如 output.mp4</p><h3 id="编解码器" tabindex="-1"><a class="header-anchor" href="#编解码器"><span>编解码器</span></a></h3><p>编解码器（Codec）用于压缩和解压缩音视频数据的算法，常见视频编解码器：H.264, H.265 (HEVC), VP9，常见音频编解码器：AAC, MP3, Opus。FFmpeg 使用 -c:v（视频）和 -c:a（音频）参数，如 -c:v libx264</p><h3 id="比特率" tabindex="-1"><a class="header-anchor" href="#比特率"><span>比特率</span></a></h3><p>比特率（Bitrate）又称码率，指每秒传输或处理的比特数，提高码率可以提高视频质量，但会增大文件大小。降低码率可以减小文件大小，但会降低质量。FFmpeg 使用 -b:v（视频）和 -b:a（音频）参数，如 -b:v 1M</p><h3 id="帧率" tabindex="-1"><a class="header-anchor" href="#帧率"><span>帧率</span></a></h3><p>帧率（Frame Rate）指视频每秒显示的图像数，降低帧率可以减小文件大小，但会使视频看起来更&quot;卡顿&quot;。FFmpeg 使用 -r 参数，如 -r 30</p><h3 id="分辨率" tabindex="-1"><a class="header-anchor" href="#分辨率"><span>分辨率</span></a></h3><p>分辨率（Resolution）指定视频的宽度和高度，以像素为单位，降低分辨率可以大幅减小文件大小，但会降低视觉质量。FFmpeg 用法：使用 -s 参数，如 -s 1920x1080</p><p>常用参数: -vf scale=1280:720 设置分辨率为 1280x720</p><h3 id="流" tabindex="-1"><a class="header-anchor" href="#流"><span>流</span></a></h3><p>流（Stream）是容器中的单个音频、视频或字幕轨道。FFmpeg 使用 -map 参数选择特定流，如 -map 0✌️0 -map 0🅰️0</p><h3 id="滤镜" tabindex="-1"><a class="header-anchor" href="#滤镜"><span>滤镜</span></a></h3><p>滤镜（Filter）用于修改音频或视频的效果。FFmpeg 使用 -filter:v（视频）和 -filter:a（音频）参数，如 -filter:v &quot;scale=1280:720&quot;</p><h2 id="转换视频格式" tabindex="-1"><a class="header-anchor" href="#转换视频格式"><span>转换视频格式</span></a></h2><h3 id="无损转换" tabindex="-1"><a class="header-anchor" href="#无损转换"><span>无损转换</span></a></h3><p>无损转换保留原始文件的质量，不会降低视频和音频的质量，一般使用 FFmpeg 的 copy 模式进行无损转换</p><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">ffmpeg</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -i</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> input.avi</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -c</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> copy</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> output.avi</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>该命令会直接复制输入文件的编解码器和容器格式，生成一个完全相同的输出文件</p><h3 id="有损转换" tabindex="-1"><a class="header-anchor" href="#有损转换"><span>有损转换</span></a></h3><p>有损转换会降低视频和音频的质量，但可以减小输出文件的大小。FFmpeg 支持使用各种编解码器进行有损转换，例如 H.264、VP9 等，一般使用 FFmpeg 的<code>-c:v</code>和<code>-c:a</code>选项指定视频和音频的编解码器</p><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">ffmpeg</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -i</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> input.avi</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -c:v</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> libx264</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -c:a</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> aac</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> output.mp4</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>该命令会使用 H.264 编码视频，AAC 编码音频，转换成 MP4 容器格式，可以通过调整编解码器的参数来平衡质量和文件大小</p><p>CRF (Constant Rate Factor):</p><ul><li>CRF 是一种基于质量的恒定码率模式，范围从 0 到 51，0 表示无损</li><li>较低的 CRF 值会得到更高质量但更大文件的视频</li><li>常用参数: -crf 28 设置 CRF 为 28</li></ul><p>编码模式 (preset):</p><ul><li>FFmpeg 提供了一系列预设编码模式，从&quot;ultrafast&quot;到&quot;veryslow&quot;不等</li><li>&quot;ultrafast&quot;模式编码速度快，但质量较低;&quot;veryslow&quot;模式质量高，但编码速度慢</li><li>常用参数: -preset medium 设置编码模式为 medium</li></ul><h2 id="合并" tabindex="-1"><a class="header-anchor" href="#合并"><span>合并</span></a></h2><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">ffmpeg</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -i</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> video.mp4</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -i</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> audio.mp3</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -c:v</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> copy</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -c:a</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> aac</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -map</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 0:v:0</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -map</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> 1:a:0</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> output.mp4</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ol><li><code>-i video.mp4</code>: 指定输入视频文件</li><li><code>-i audio.mp3</code>: 指定输入音频文件</li><li><code>-c:v copy</code>: 复制视频编码，不进行重新编码（这样可以保持原视频质量并加快处理速度）</li><li><code>-c:a aac</code>: 将音频编码为 AAC 格式（通常与 MP4 容器一起使用）</li><li><code>-map 0:v:0</code>: 从第一个输入文件（视频）中选择第一个视频流</li><li><code>-map 1:a:0</code>: 从第二个输入文件（音频）中选择第一个音频流</li><li><code>output.mp4</code>: 指定输出文件名和格式</li></ol><h2 id="连接" tabindex="-1"><a class="header-anchor" href="#连接"><span>连接</span></a></h2><p>使用 concat 分离器（推荐方法，这种方法适用于大多数音频格式，并且可以保持原始音频的质量。首先，创建一个文本文件（例如 input.txt），列出要合并的音频文件：</p><div class="language-plain line-numbers-mode" data-highlighter="shiki" data-ext="plain" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>file &#39;audio1.mp3&#39;</span></span>
<span class="line"><span>file &#39;audio2.mp3&#39;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>然后，使用以下命令：</p><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">ffmpeg</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -f</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> concat</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -safe</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -i</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> input.txt</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -c</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> copy</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> output.mp3</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div>`,37)]))}const d=s(n,[["render",p]]),o=JSON.parse(`{"path":"/sundry/ffmpeg.html","title":"FFmpeg","lang":"zh-CN","frontmatter":{"title":"FFmpeg","category":"知识分享","article":false,"description":"多媒体领域基础 容器 容器（Container）用于封装视频、音频和其他数据的文件格式，常见格式：MP4, MKV, AVI, WebM。FFmpeg 通过文件扩展名指定，如 output.mp4 编解码器 编解码器（Codec）用于压缩和解压缩音视频数据的算法，常见视频编解码器：H.264, H.265 (HEVC), VP9，常见音频编解码器：AA...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"WebPage\\",\\"name\\":\\"FFmpeg\\",\\"description\\":\\"多媒体领域基础 容器 容器（Container）用于封装视频、音频和其他数据的文件格式，常见格式：MP4, MKV, AVI, WebM。FFmpeg 通过文件扩展名指定，如 output.mp4 编解码器 编解码器（Codec）用于压缩和解压缩音视频数据的算法，常见视频编解码器：H.264, H.265 (HEVC), VP9，常见音频编解码器：AA...\\"}"],["meta",{"property":"og:url","content":"https://jinqiu.wang/sundry/ffmpeg.html"}],["meta",{"property":"og:site_name","content":"JQiue's notes"}],["meta",{"property":"og:title","content":"FFmpeg"}],["meta",{"property":"og:description","content":"多媒体领域基础 容器 容器（Container）用于封装视频、音频和其他数据的文件格式，常见格式：MP4, MKV, AVI, WebM。FFmpeg 通过文件扩展名指定，如 output.mp4 编解码器 编解码器（Codec）用于压缩和解压缩音视频数据的算法，常见视频编解码器：H.264, H.265 (HEVC), VP9，常见音频编解码器：AA..."}],["meta",{"property":"og:type","content":"website"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-06-19T06:51:15.000Z"}],["meta",{"property":"article:modified_time","content":"2025-06-19T06:51:15.000Z"}]]},"git":{"createdTime":1750315875000,"updatedTime":1750315875000,"contributors":[{"name":"JQiue","username":"JQiue","email":"861947542@qq.com","commits":1,"url":"https://github.com/JQiue"}]},"readingTime":{"minutes":3.34,"words":1002},"filePathRelative":"sundry/ffmpeg.md","excerpt":"<h2>多媒体领域基础</h2>\\n<h3>容器</h3>\\n<p>容器（Container）用于封装视频、音频和其他数据的文件格式，常见格式：MP4, MKV, AVI, WebM。FFmpeg 通过文件扩展名指定，如 output.mp4</p>\\n<h3>编解码器</h3>\\n<p>编解码器（Codec）用于压缩和解压缩音视频数据的算法，常见视频编解码器：H.264, H.265 (HEVC), VP9，常见音频编解码器：AAC, MP3, Opus。FFmpeg 使用 -c:v（视频）和 -c:a（音频）参数，如 -c:v libx264</p>\\n<h3>比特率</h3>\\n<p>比特率（Bitrate）又称码率，指每秒传输或处理的比特数，提高码率可以提高视频质量，但会增大文件大小。降低码率可以减小文件大小，但会降低质量。FFmpeg 使用 -b:v（视频）和 -b:a（音频）参数，如 -b:v 1M</p>","autoDesc":true}`);export{d as comp,o as data};
