import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,a as n,o as l}from"./app-BvEWR9Cw.js";const t={};function e(h,i){return l(),a("div",null,i[0]||(i[0]=[n(`<p>内存是计算机中非常稀有的资源，了解一个内存的架构，如何理解操作系统管理内存，作为一个程序员更好的使用内存是非常有必要的</p><p>在一个典型的架构中，分配给应用程序的内存被分为 4 个区段：</p><ul><li>堆区 - 动态内存，可以分配任意大小的内存，只要不超过计算机内存的可用容量，堆并不是数据结构中的堆实现</li><li>栈区 - 用于存放函数调用时的所有信息，包括所有的局部变量，生命周期只存在函数运行期间</li><li>静态/全局数据段 - 不在函数中定义的变量，生命周期贯穿整个程序</li><li>代码段 - 存放程序执行的指令</li></ul><p>栈区、静态/全局数据段、代码段在运行期间的大小是不会增长的</p><p>在栈中执行的函数永远都是栈顶的函数在执行，其他的函数暂停执行等待上面的函数执行完，然后自动回收空间。<code>main</code>函数永远都处于栈底，因为它是程序的入口，也是出口。如果在运行期间耗尽了栈空间，就会产生栈溢出现象，导致程序崩溃</p><p>而堆是由程序员自己可以分配的内存空间，由程序员手动分配，手动回收，一切都交给程序员来决定。C 提供了四个函数用来操作堆，它们都由<code>stdlib.h</code>提供：</p><ul><li><code>malloc(size)</code> - 在堆中分配指定字节大小的空间，并返回一个指向该内存起始地址的<code>void</code>类型指针，不会初始化，会得到垃圾值</li><li><code>calloc(num, size)</code> - 和<code>malloc</code>差不多，但是会初始化值为<code>0</code></li><li><code>realloc(void *ptr, size)</code> - 重新分配通过<code>malloc/calloc</code>分配的内存空间并拷贝数据，可以增大或减小，并返回指向该起始地址的<code>void</code>类型指针</li><li><code>free(void *ptr)</code> - 释放指定地址的内存空间</li></ul><div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> a;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> *</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">p;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 在堆中分配 sizeof(int) 大小的空间</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">p </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> *</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">malloc</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">sizeof</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">));</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">*</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">p </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">printf</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">%d</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> *</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">p</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 1</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果<code>malloc</code>找不到内存中可分配的内存块就会返回<code>NULL</code></p><p>之前无法在运行期间指定数组大小的问题，也可以通过动态内存分配来解决了</p><div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">#include</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &lt;stdio.h&gt;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">#include</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &lt;stdlib.h&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> main</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">void</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">){</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> n;</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">  scanf</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">%d</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&amp;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">n);</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> arr </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> *</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">malloc</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(n </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">*</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> sizeof</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">));</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  return</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,11)]))}const d=s(t,[["render",e]]),r=JSON.parse(`{"path":"/c/malloc.html","title":"内存分配","lang":"zh-CN","frontmatter":{"title":"内存分配","category":"编程语言","tag":["C"],"article":false,"order":6,"description":"内存是计算机中非常稀有的资源，了解一个内存的架构，如何理解操作系统管理内存，作为一个程序员更好的使用内存是非常有必要的 在一个典型的架构中，分配给应用程序的内存被分为 4 个区段： 堆区 - 动态内存，可以分配任意大小的内存，只要不超过计算机内存的可用容量，堆并不是数据结构中的堆实现 栈区 - 用于存放函数调用时的所有信息，包括所有的局部变量，生命周期...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"WebPage\\",\\"name\\":\\"内存分配\\",\\"description\\":\\"内存是计算机中非常稀有的资源，了解一个内存的架构，如何理解操作系统管理内存，作为一个程序员更好的使用内存是非常有必要的 在一个典型的架构中，分配给应用程序的内存被分为 4 个区段： 堆区 - 动态内存，可以分配任意大小的内存，只要不超过计算机内存的可用容量，堆并不是数据结构中的堆实现 栈区 - 用于存放函数调用时的所有信息，包括所有的局部变量，生命周期...\\"}"],["meta",{"property":"og:url","content":"https://jinqiu.wang/c/malloc.html"}],["meta",{"property":"og:site_name","content":"JQiue's notes"}],["meta",{"property":"og:title","content":"内存分配"}],["meta",{"property":"og:description","content":"内存是计算机中非常稀有的资源，了解一个内存的架构，如何理解操作系统管理内存，作为一个程序员更好的使用内存是非常有必要的 在一个典型的架构中，分配给应用程序的内存被分为 4 个区段： 堆区 - 动态内存，可以分配任意大小的内存，只要不超过计算机内存的可用容量，堆并不是数据结构中的堆实现 栈区 - 用于存放函数调用时的所有信息，包括所有的局部变量，生命周期..."}],["meta",{"property":"og:type","content":"website"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-06-19T06:51:15.000Z"}],["meta",{"property":"article:tag","content":"C"}],["meta",{"property":"article:modified_time","content":"2025-06-19T06:51:15.000Z"}]]},"git":{"createdTime":1750315875000,"updatedTime":1750315875000,"contributors":[{"name":"JQiue","username":"JQiue","email":"861947542@qq.com","commits":1,"url":"https://github.com/JQiue"}]},"readingTime":{"minutes":2.12,"words":637},"filePathRelative":"c/malloc.md","excerpt":"<p>内存是计算机中非常稀有的资源，了解一个内存的架构，如何理解操作系统管理内存，作为一个程序员更好的使用内存是非常有必要的</p>\\n<p>在一个典型的架构中，分配给应用程序的内存被分为 4 个区段：</p>\\n<ul>\\n<li>堆区 - 动态内存，可以分配任意大小的内存，只要不超过计算机内存的可用容量，堆并不是数据结构中的堆实现</li>\\n<li>栈区 - 用于存放函数调用时的所有信息，包括所有的局部变量，生命周期只存在函数运行期间</li>\\n<li>静态/全局数据段 - 不在函数中定义的变量，生命周期贯穿整个程序</li>\\n<li>代码段 - 存放程序执行的指令</li>\\n</ul>\\n<p>栈区、静态/全局数据段、代码段在运行期间的大小是不会增长的</p>","autoDesc":true}`);export{d as comp,r as data};
