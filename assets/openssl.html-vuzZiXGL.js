import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,a as t,o as a}from"./app-BvEWR9Cw.js";const n={};function r(l,i){return a(),s("div",null,i[0]||(i[0]=[t('<h2 id="ssl-证书相关基础" tabindex="-1"><a class="header-anchor" href="#ssl-证书相关基础"><span>SSL 证书相关基础</span></a></h2><p>一般来说，申请证书的步骤是：</p><ol><li>创建一个私钥（key）文件</li><li>根据私钥生成一个证书签名请求（csr， Certificate Signing Request）文件</li><li>把请求文件提交给权威的证书颁发机构，颁发机构审核通过之后，再根据这些申请信息生成相应的证书（crt， certificate 文件）</li></ol><p>证书颁发机构用于给别人签署的证书属于 CA 证书，只要 CA 证书受信任，则 CA 证书签署过的证书也会受信任</p><p>而自己给自己签署的证书称为自签署证书，可以当作 CA 证书来使用。只是使用前需要手动加入浏览器等软件的证书信任列表中，否则浏览器会不信任</p><h2 id="过程" tabindex="-1"><a class="header-anchor" href="#过程"><span>过程</span></a></h2><p>创建私钥（key）</p><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">openssl</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> genrsa</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -out</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> my.key</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 2048</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>使用 <a href="https://www.openssl.org/" target="_blank" rel="noopener noreferrer">openssl</a> 可以快速的生成用于本地测试的证书，最常见的情况是自签名证书，openssl 提供了快速的命令</p><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">openssl</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> req</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -newkey</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> rsa:2048</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -keyout</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> key.pem</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -nodes</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -out</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> cert.pem</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -x509</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -days</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 365</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>在提示通用名<code>common name</code>时，输入<code>localhost</code>，以上就生成了 2048 位 RSA 算法的自签名证书 cert.pem，有效期为 365 天，私钥为 key.pem，大部分 SSL 只需要这两个文件。然后可以启动 openssl 自带的服务器来测试</p><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">openssl</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> s_server</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -WWW</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -key</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> key.pem</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -cert</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> cert.pem</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -accept</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 8888</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>此时浏览器访问<code>https://localhost:8888</code>即可进行访问，当然会看到浏览器不信任的证书，但只要证书可以用于本地测试就够了</p><p>如果想要解决浏览器该死的不信任，应该到<a href="https://gist.github.com/soarez/9688998" target="_blank" rel="noopener noreferrer">这里</a></p>',14)]))}const o=e(n,[["render",r]]),k=JSON.parse(`{"path":"/sundry/openssl.html","title":"使用 openssl 生成证书","lang":"zh-CN","frontmatter":{"title":"使用 openssl 生成证书","category":"知识分享","tag":["SSL"],"date":"2021-03-12T00:00:00.000Z","description":"SSL 证书相关基础 一般来说，申请证书的步骤是： 创建一个私钥（key）文件 根据私钥生成一个证书签名请求（csr， Certificate Signing Request）文件 把请求文件提交给权威的证书颁发机构，颁发机构审核通过之后，再根据这些申请信息生成相应的证书（crt， certificate 文件） 证书颁发机构用于给别人签署的证书属于 ...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"使用 openssl 生成证书\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2021-03-12T00:00:00.000Z\\",\\"dateModified\\":\\"2025-06-19T06:51:15.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"JQiue\\",\\"url\\":\\"https://jinqiu.wang/\\"}]}"],["meta",{"property":"og:url","content":"https://jinqiu.wang/sundry/openssl.html"}],["meta",{"property":"og:site_name","content":"JQiue's notes"}],["meta",{"property":"og:title","content":"使用 openssl 生成证书"}],["meta",{"property":"og:description","content":"SSL 证书相关基础 一般来说，申请证书的步骤是： 创建一个私钥（key）文件 根据私钥生成一个证书签名请求（csr， Certificate Signing Request）文件 把请求文件提交给权威的证书颁发机构，颁发机构审核通过之后，再根据这些申请信息生成相应的证书（crt， certificate 文件） 证书颁发机构用于给别人签署的证书属于 ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-06-19T06:51:15.000Z"}],["meta",{"property":"article:tag","content":"SSL"}],["meta",{"property":"article:published_time","content":"2021-03-12T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-06-19T06:51:15.000Z"}]]},"git":{"createdTime":1750315875000,"updatedTime":1750315875000,"contributors":[{"name":"JQiue","username":"JQiue","email":"861947542@qq.com","commits":1,"url":"https://github.com/JQiue"}]},"readingTime":{"minutes":1.46,"words":438},"filePathRelative":"sundry/openssl.md","excerpt":"<h2>SSL 证书相关基础</h2>\\n<p>一般来说，申请证书的步骤是：</p>\\n<ol>\\n<li>创建一个私钥（key）文件</li>\\n<li>根据私钥生成一个证书签名请求（csr， Certificate Signing Request）文件</li>\\n<li>把请求文件提交给权威的证书颁发机构，颁发机构审核通过之后，再根据这些申请信息生成相应的证书（crt， certificate 文件）</li>\\n</ol>\\n<p>证书颁发机构用于给别人签署的证书属于 CA 证书，只要 CA 证书受信任，则 CA 证书签署过的证书也会受信任</p>\\n<p>而自己给自己签署的证书称为自签署证书，可以当作 CA 证书来使用。只是使用前需要手动加入浏览器等软件的证书信任列表中，否则浏览器会不信任</p>","autoDesc":true}`);export{o as comp,k as data};
